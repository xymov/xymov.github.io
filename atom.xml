<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>nohacks</title>
  
  <subtitle> 星源网络官方博客</subtitle>
  <link href="http://www.nohacks.cn/atom.xml" rel="self"/>
  
  <link href="http://www.nohacks.cn/"/>
  <updated>2022-01-15T03:53:00.222Z</updated>
  <id>http://www.nohacks.cn/</id>
  
  <author>
    <name>nohacks</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>海洋CMS采集优化</title>
    <link href="http://www.nohacks.cn/2022/01/15/hai-yang-cms-cai-ji-you-hua.html"/>
    <id>http://www.nohacks.cn/2022/01/15/hai-yang-cms-cai-ji-you-hua.html</id>
    <published>2022-01-15T02:36:15.000Z</published>
    <updated>2022-01-15T03:53:00.222Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p>现在很多资源站采用苹果CMS构建，特别是官方资源站，海洋CMS采集后可能只有一个视频地址，本文就提供这个解决办法，由nohacks.cn原创，转载请注明出处！</p></blockquote><h3 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h3><p>   现在很多资源站采用苹果CMS构建，特别是官方资源，海洋CMS采集后可能只有一个视频地址,没有来源标签或视频标题，这样采集回来的数据是无法在海洋CMS里使用的。</p><p>   笔者经过研究发现唯有修改海洋CMS的源码才能解决，具体步骤如下：</p><p>   打开<code>/include/collection.class.php</code> 在第65行附近找到下面的代码：</p> <pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token variable">$flag</span><span class="token operator">=</span><span class="token variable">$z</span><span class="token punctuation">[</span><span class="token string double-quoted-string">"<span class="token interpolation"><span class="token variable">$f</span></span>"</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在下面插入下面代码：</p><pre class="line-numbers language-php" data-language="php"><code class="language-php"><span class="token comment">/*  自动修复影片数据   by nohacks.cn */</span><span class="token variable">$dd</span><span class="token operator">=</span><span class="token variable">$video</span><span class="token operator">-&gt;</span><span class="token property">dl</span><span class="token operator">-&gt;</span><span class="token property">dd</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token variable">$vod</span><span class="token operator">=</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"#"</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword type-casting">string</span><span class="token punctuation">)</span><span class="token variable">$dd</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token variable">$vlist</span><span class="token operator">=</span><span class="token function">explode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"$"</span><span class="token punctuation">,</span><span class="token variable">$vod</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$vlist</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token comment">//补充完整</span><span class="token variable">$nohacks</span><span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span> <span class="token keyword">foreach</span><span class="token punctuation">(</span><span class="token variable">$vod</span> <span class="token keyword">as</span> <span class="token operator">&amp;</span><span class="token variable">$mov</span><span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">sizeof</span><span class="token punctuation">(</span><span class="token variable">$vlist</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token variable">$mov</span><span class="token operator">=</span><span class="token string double-quoted-string">"正片_"</span><span class="token operator">.</span><span class="token variable">$nohacks</span><span class="token operator">.</span><span class="token string double-quoted-string">"$"</span><span class="token operator">.</span><span class="token variable">$mov</span><span class="token operator">.</span><span class="token string double-quoted-string">"$"</span><span class="token operator">.</span><span class="token variable">$f</span><span class="token punctuation">;</span><span class="token variable">$nohacks</span><span class="token operator">++</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">else</span><span class="token punctuation">{</span><span class="token variable">$mov</span><span class="token operator">=</span><span class="token variable">$mov</span><span class="token operator">.</span><span class="token string double-quoted-string">"$"</span><span class="token operator">.</span><span class="token variable">$f</span><span class="token punctuation">;</span><span class="token punctuation">}</span> <span class="token punctuation">}</span> <span class="token comment">//重新组合</span><span class="token variable">$video</span><span class="token operator">-&gt;</span><span class="token property">dl</span><span class="token operator">-&gt;</span><span class="token property">dd</span><span class="token punctuation">[</span><span class="token variable">$i</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">implode</span><span class="token punctuation">(</span><span class="token string double-quoted-string">"#"</span><span class="token punctuation">,</span><span class="token variable">$vod</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment">/* 自动修复影片数据    代码结束    */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>保存更新缓存即可。</p><h3 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h3><p>   这段代码主要是检测影片地址数据,如果发现数据段少于3就开始工作，如果数据段为1，代表只有一个地址，就补充名称和后缀，否则只补充后缀。</p><p>   谢谢观赏，完。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;现在很多资源站采用苹果CMS构建，特别是官方资源站，海洋CMS采集后可能只有一个视频地址，本文就提供这个解决办法，</summary>
      
    
    
    
    <category term="随笔" scheme="http://www.nohacks.cn/categories/%E9%9A%8F%E7%AC%94/"/>
    
    
    <category term="seacms" scheme="http://www.nohacks.cn/tags/seacms/"/>
    
    <category term="采集优化" scheme="http://www.nohacks.cn/tags/%E9%87%87%E9%9B%86%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>网吧影视特权</title>
    <link href="http://www.nohacks.cn/2022/01/10/netbar-vip-video.html"/>
    <id>http://www.nohacks.cn/2022/01/10/netbar-vip-video.html</id>
    <published>2022-01-10T02:05:45.000Z</published>
    <updated>2022-01-10T03:24:01.806Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>完全免费的网吧影视特权软件，分为服务端和客户端，支持腾讯，优酷，爱奇艺等八家主流视频网站的免VIP视频播放，由nohacks.cn原创，转载请注明出处！</p></blockquote><p><a href="https://imgtu.com/i/7ALGLQ"><img src="https://s4.ax1x.com/2022/01/10/7ALGLQ.jpg"></a></p><p>简介：<br>   早期采用<code>易语言</code>编写的一款免VIP看视频软件，分为服务端和客户端，特别适合<code>网吧</code>使用,最重要的是它完全<code>免费</code>！</p><p>   云端实时更新，支持剧集连播，海量VIP影片等你来看！</p><p>官方地址：<a href="http://user.nohacks.cn/home/article/index/id/1.html" title="点击前往">点击前往</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;blockquote&gt;
&lt;p&gt;完全免费的网吧影视特权软件，分为服务端和客户端，支持腾讯，优酷，爱奇艺等八家主流视频网站的免VIP视频播放，由nohacks.cn原创，转载请注明出处！&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://imgtu.com</summary>
      
    
    
    
    <category term="作品" scheme="http://www.nohacks.cn/categories/%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="网吧影视特权" scheme="http://www.nohacks.cn/tags/%E7%BD%91%E5%90%A7%E5%BD%B1%E8%A7%86%E7%89%B9%E6%9D%83/"/>
    
  </entry>
  
  <entry>
    <title>联想thinkpad-x1c4 黑苹果经验分享</title>
    <link href="http://www.nohacks.cn/2022/01/10/thinkpad-x1c4-hackintosh.html"/>
    <id>http://www.nohacks.cn/2022/01/10/thinkpad-x1c4-hackintosh.html</id>
    <published>2022-01-10T01:37:18.000Z</published>
    <updated>2022-01-10T03:46:30.293Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p> 本文主要分享了用Thinkpad X1C4 安装最新黑苹果系统时遇到的各种问题以及解决方法，并提供了EFI下载，由nohacks.cn原创，转载请注明出处！</p></blockquote><p><a href="https://imgtu.com/i/7AODht"><img src="https://s4.ax1x.com/2022/01/10/7AODht.png"></a></p><p>   推荐使用<code>黑果小兵</code>的三分区镜像(文末提供下载)，具体安装过程就不讲了，可参考<a href="https://apple.sqlsec.com/" title="国光的黑苹果安装教程">国光的黑苹果安装教程</a>，说下关键的问题：</p><h4 id="出现禁止符"><a href="#出现禁止符" class="headerlink" title="出现禁止符"></a>出现禁止符</h4><p>   默认配置安装会出现禁止符号，需要修改OC配置关闭RTC检测，具体路径<code>kernet-quirks-DisabRtcChecksum</code></p><h4 id="出现动画"><a href="#出现动画" class="headerlink" title="出现动画"></a>出现动画</h4><p>   这个是蓝牙连接助理动画，出现这个是因为键鼠驱动加载失败,这个是需要添加控制驱动，顺序如下：</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">#启用VoodooPS2Controller.kextVoodooPS2Controller.kext/Contents/PlugIns/VoodooPS2Mouse.kextVoodooPS2Controller.kext/Contents/PlugIns/VoodooPS2Keyboard.kextVoodooPS2Controller.kext/Contents/PlugIns/VoodooPS2Trackpad.kext#禁用VoodooPS2Controller.kext/Contents/PlugIns/VoodooInput.kext#然后启用加载基础的 RMI 配置：VoodooRMI.kextVoodooRMI.kext/Contents/PlugIns/VoodooInput.kext#如果你是SMBus触控板的话，还需要加载：VoodooSMBus.kextVoodooRMI.kext/Contents/PlugIns/RMISMBus.kext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="卡代码或蓝牙WIFI无法使用"><a href="#卡代码或蓝牙WIFI无法使用" class="headerlink" title="卡代码或蓝牙WIFI无法使用"></a>卡代码或蓝牙WIFI无法使用</h4><p>   后来研究发现是蓝牙驱动造成的，需要使用<code>BlueToolFlxup.kext</code>代替原来的<code>interBluetoothlnjector.text</code><br>   WIFI使用最新的<code>Airportltlwm.kext</code>，下载<code>Monterey</code>版本即可。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">#Intel无线和蓝牙加载顺序： AirportItlwm.kext BlueToolFlxup.kext IntelBluetoothFirmware.kext<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="电量及驱动板设置不显示"><a href="#电量及驱动板设置不显示" class="headerlink" title="电量及驱动板设置不显示"></a>电量及驱动板设置不显示</h4><p>   用最新版的<code>ECEnabler.kext</code> 可解决问题</p><p>EFI下载：<a href="https://cloud.189.cn/t/UzYrY3B3qIVf" title="天翼云盘（访问码：7qqc）">天翼云盘（访问码：7qqc）</a><br>参考链接：<a href="https://apple.sqlsec.com/" title="国光的黑苹果安装教程">国光的黑苹果安装教程</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt; 本文主要分享了用Thinkpad X1C4 安装最新黑苹果系统时遇到的各种问题以及解决方法，并提供了EFI下载，</summary>
      
    
    
    
    <category term="分享" scheme="http://www.nohacks.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="黑苹果" scheme="http://www.nohacks.cn/tags/%E9%BB%91%E8%8B%B9%E6%9E%9C/"/>
    
    <category term="Hackintosh" scheme="http://www.nohacks.cn/tags/Hackintosh/"/>
    
  </entry>
  
  <entry>
    <title>全聚合影视</title>
    <link href="http://www.nohacks.cn/2022/01/10/vst-video.html"/>
    <id>http://www.nohacks.cn/2022/01/10/vst-video.html</id>
    <published>2022-01-10T00:45:15.000Z</published>
    <updated>2022-01-16T01:25:36.280Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>vst-video是开源的跨平台资源视频播放器，支持浏览播放自定义资源站视频，堪比快播，由nohacks.cn原创，转载请注明出处！</p></blockquote><p><a href="https://imgtu.com/i/7AO2ng"><img src="https://s4.ax1x.com/2022/01/10/7AO2ng.png"></a></p><p><a href="https://imgtu.com/i/7AOBtI"><img src="https://s4.ax1x.com/2022/01/10/7AOBtI.png"></a></p><p><a href="https://imgtu.com/i/7AOtXD"><img src="https://s4.ax1x.com/2022/01/10/7AOtXD.png"></a></p><h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><p>基于 Qt 的 QMultiMedia组件构建，目标是搭建deepin v20云播放平台。</p><p>主要有以下特色或功能：</p><ul><li>简介高效,快速浏览视频简介，不用频繁在简介和浏览下切换，特别适合现代高分辨率机器。</li><li>自定义资源站，拥有无限视频资源库(百度搜索资源站，使用支持海洋CMS的资源接口)。</li><li>支持主题切换，可选系统，浅色及深色，默认系统。</li><li>兼容古董电脑，可切换渲染模式,可选视频和绘制，现代电脑可选绘制模式以消除绿边，支持更多功能。</li><li>支持本地和远程视频播放，可设置为默认播放器作为本地播放器使用。</li><li>支持播放记录，可快速播放上次播放视频。</li></ul><h3 id="更新历史"><a href="#更新历史" class="headerlink" title="更新历史"></a>更新历史</h3><p>V2.55主要更新<br>添加视频渲染选项，可选视频（默认）和绘制(视频有绿边选择此模式可消除);<br>资源设置添加分类过滤功能；<br>视频播放器右键添加刷新功能;<br>修复自选主题缩放BUG;<br>其它细节优化;</p><h3 id="Windows版本下载"><a href="#Windows版本下载" class="headerlink" title="Windows版本下载"></a>Windows版本下载</h3><p>先安装<a href="https://github.com/Nevcairiel/LAVFilters/releases/download/0.75.1/LAVFilters-0.75.1-Installer.exe" title="解码器">解码器</a>，在下载<a href="https://github.com/xymov/vst-video/releases/download/V2.55/vst-video-win32.zip" title="vst-video-win32.zip">vst-video-win32.zip</a>解压，运行vst-video.exe即可<br>另外默认资源站已经失效，需要更新资源，右上角-菜单-设置-资源设置 ,复制下面的内容进行替换即可。</p><pre class="line-numbers language-text" data-language="text"><code class="language-text">天空云,https://api.tiankongapi.com/api.php/provide/vod/at/xml/from/tkm3u8/百度云,https://m3u8.apibdzy.com/api.php/provide/vod/at/xml/<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="更多版本下载"><a href="#更多版本下载" class="headerlink" title="更多版本下载"></a><a href="https://github.com/xymov/vst-video/releases/tag/V2.55" title="点击前往">更多版本下载</a></h3><p>   <a href="https://pan.baidu.com/s/1LoGH45z-Y9PnrtXuSPeaIg" title="提取码:h8sb ">网盘下载(提取码:h8sb)</a> </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;vst-video是开源的跨平台资源视频播放器，支持浏览播放自定义资源站视频，堪比快播，由nohacks.cn原创</summary>
      
    
    
    
    <category term="作品" scheme="http://www.nohacks.cn/categories/%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="快播" scheme="http://www.nohacks.cn/tags/%E5%BF%AB%E6%92%AD/"/>
    
    <category term="全聚合" scheme="http://www.nohacks.cn/tags/%E5%85%A8%E8%81%9A%E5%90%88/"/>
    
  </entry>
  
  <entry>
    <title>xymov智能解析</title>
    <link href="http://www.nohacks.cn/2022/01/08/xymov.html"/>
    <id>http://www.nohacks.cn/2022/01/08/xymov.html</id>
    <published>2022-01-08T00:45:15.000Z</published>
    <updated>2022-01-10T23:06:16.230Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><blockquote><p>  xymov视频解析采用缓存技术，能快速响应用户数据请求，体验超清视频急速播放效果，支持80+个视频站点解析内置超强的防火墙、广告过滤功能，保证你每一分钱都不会浪费。轻松实现PC、WAP、APP三端完美对接。</p></blockquote><h4 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h4> <iframe id="video" src="https://parse.xymov.net/?url=" scrolling="0" frameborder="0" width="100%" height="500" allowfullscreen="allowfullscreen"></iframe>'<h4 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h4><ul><li><p>云解析：能够主动调用第三方资源站资源播映。</p></li><li><p>API 解析：能够设置调用 苹果 cms/海洋 cms 数据库资源</p></li><li><p>在线查找：用户能够直接在线查找资源播映。</p></li><li><p>广告屏蔽：内置广告屏蔽代码，并配有具体使用说明，轻松屏蔽一次解析广告。</p></li><li><p>授权防盗用功用：可设置域名、ip 授权，做自己的商业解析!</p></li><li><p>在线直播：聚合全网优质在线直播，急速播映，高清画质!能够无限增加!</p></li><li><p>盗用跳转：发现有人盗用你的解析时，主动跳转 你设置的网址</p></li><li><p>缓存功用：之前解析过的视频可进行急速播映无推迟!(可封闭)</p></li><li><p>二次解析线路无限增加!</p></li></ul><p>10.智能解析：能够装备智能解析，能够针对不同来历站主动调用解析!</p><h4 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h4><p>官方网站：<a href="http://www.xymov.net/">http://www.xymov.net</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;  xymov视频解析采用缓存技术，能快速响应用户数据请求，体验超清视频急速播放效果，支持80+个视频站点解析内置</summary>
      
    
    
    
    <category term="作品" scheme="http://www.nohacks.cn/categories/%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="xymov" scheme="http://www.nohacks.cn/tags/xymov/"/>
    
    <category term="xyplayer" scheme="http://www.nohacks.cn/tags/xyplayer/"/>
    
    <category term="解析" scheme="http://www.nohacks.cn/tags/%E8%A7%A3%E6%9E%90/"/>
    
  </entry>
  
  <entry>
    <title>Win10封装及减肥步骤</title>
    <link href="http://www.nohacks.cn/2016/06/19/win10-jian-fei-bu-zou.html"/>
    <id>http://www.nohacks.cn/2016/06/19/win10-jian-fei-bu-zou.html</id>
    <published>2016-06-19T00:45:15.000Z</published>
    <updated>2022-01-17T02:59:46.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><blockquote><p>本文主要介绍win10的减肥步骤以及Windows减肥专家的使用方法，由nohacks.cn原创，转载请注明出处！</p></blockquote><h2 id="系统优化"><a href="#系统优化" class="headerlink" title="系统优化"></a>系统优化</h2><h3 id="启用管理员账户"><a href="#启用管理员账户" class="headerlink" title="启用管理员账户"></a>启用管理员账户</h3><ul><li>控制面板启用administrator账户：快捷键”WIN+X”-计算机管理-本地用户和组-administrator账户-将账户已禁用前面的复选框勾去掉，点击应用按钮。</li></ul><ul><li>删除当前账户：WIN+X-注销或关机-注销-选择administrator账户登陆，账户-其他用户-删除。</li><li>解决Windows10 默认无法使用管理员账户启动应用：快捷键 windows+R 打开运行窗口，输入“gpedit.msc”打开组策略,<code>本地计算机配置-windows设置-安全设置-本地策略-安全选项</code>找到”用户帐户控制-<code>用于内置管理员账户的管理员批准模式</code>“，选中已启用，保存退出。</li></ul><h3 id="显示桌面图标"><a href="#显示桌面图标" class="headerlink" title="显示桌面图标"></a>显示桌面图标</h3><p>  桌面空白处- 右键-个性化-主题-桌面图标设置-全部选中（控制面板除外），任务栏显示搜索图标， 任务栏-右键-搜索-显示搜索图标。</p><h3 id="转移虚拟内存"><a href="#转移虚拟内存" class="headerlink" title="转移虚拟内存"></a>转移虚拟内存</h3><p>  计算机右键属性–高级管理设置–高级–性能-设置-高级-更改。</p><h3 id="关闭休眠"><a href="#关闭休眠" class="headerlink" title="关闭休眠"></a>关闭休眠</h3><p>  WIN+R  执行  powercfg -h off  重启电脑生效 。</p><p>   C盘此时占用 8.38G ,备份(快照)一下。</p><h2 id="系统更新"><a href="#系统更新" class="headerlink" title="系统更新"></a>系统更新</h2><h3 id="安装累积更新补丁"><a href="#安装累积更新补丁" class="headerlink" title="安装累积更新补丁"></a>安装累积更新补丁</h3><p>  安装累积更新补丁kb3081424(解决欢迎界面有几率出现密码框遮挡)</p><h3 id="使用360补丁大师"><a href="#使用360补丁大师" class="headerlink" title="使用360补丁大师"></a>使用360补丁大师</h3><ul><li>用360补丁大师提取版 -漏洞修复 更新补丁到最新.</li></ul><p> C盘 9.48G，备份一下</p><h2 id="封装减肥"><a href="#封装减肥" class="headerlink" title="封装减肥"></a>封装减肥</h2><h3 id="使用DISM"><a href="#使用DISM" class="headerlink" title="使用DISM++"></a>使用DISM++</h3><p>   桌面环境下用管理员权限运行DISM++</p><ul><li><p>空间回收，全选（硬链接除外）–扫描–清理</p></li><li><p>Appx管理，建议删除OneNote（<em>OneNote</em>），3D打印 (<em>3d</em>)，Camera相机（<em>Camera</em>），roove音乐、电影与电视（<em>zune</em>),人脉（<em>people</em>），手机伴侣(Phone Companion),Xbox（<em>Xbox</em>）等不常用应用。</p></li></ul><p>  C盘 7.86G，备份一下</p><h3 id="使用Easy-Syslite"><a href="#使用Easy-Syslite" class="headerlink" title="使用Easy Syslite"></a>使用Easy Syslite</h3><p>   进PE模式，用Easy Syslite -选择win10配置-执行</p><p>  C盘 7.02G，备份一下</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h2 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;本文主要介绍win10的减肥步骤以及Windows减肥专家的使用方法，由nohacks.cn原创，转载请注明出处！</summary>
      
    
    
    
    <category term="分享" scheme="http://www.nohacks.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="Win10封装" scheme="http://www.nohacks.cn/tags/Win10%E5%B0%81%E8%A3%85/"/>
    
    <category term="系统封装" scheme="http://www.nohacks.cn/tags/%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>Easy SysLite V1.2 （Windows减肥专家）</title>
    <link href="http://www.nohacks.cn/2016/04/19/easy-syslite.html"/>
    <id>http://www.nohacks.cn/2016/04/19/easy-syslite.html</id>
    <published>2016-04-19T00:45:15.000Z</published>
    <updated>2022-01-17T00:45:31.181Z</updated>
    
    <content type="html"><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>   Easy SysLite （Windows减肥专家）是一款开源的适合装机工作者的系统减肥工具，即适合新手也适合经验丰富的玩家，向导模式，一键搞定。</p><h3 id="更新记录"><a href="#更新记录" class="headerlink" title="更新记录"></a>更新记录</h3><p>2016.4.21更新  V1.2 版<br>      Bugfix:  提示修复，修复完成提示有误导的BUG； </p><p>2016.4.20更新  V1.2 版</p><p>   Bugfix:  大幅优化程序执行速度，修复程序有时崩溃的bug;</p><p>   update: 可单独设置是否递归搜索,优化win7配置文件。</p><p>   upedit: 界面细微调整;</p><h3 id="程序界面"><a href="#程序界面" class="headerlink" title="程序界面"></a>程序界面</h3><p> 如下图：</p><p><a href="https://imgtu.com/i/7Yx85F"><img src="https://s4.ax1x.com/2022/01/16/7Yx85F.png"></a><br><a href="https://imgtu.com/i/7YxY8J"><img src="https://s4.ax1x.com/2022/01/16/7YxY8J.png"></a><br><a href="https://imgtu.com/i/7Yx3UU"><img src="https://s4.ax1x.com/2022/01/16/7Yx3UU.png"></a><br><a href="https://imgtu.com/i/7YxJC4"><img src="https://s4.ax1x.com/2022/01/16/7YxJC4.png"></a><br><a href="https://imgtu.com/i/7Yx1ET"><img src="https://s4.ax1x.com/2022/01/16/7Yx1ET.png"></a></p><h3 id="使用方法"><a href="#使用方法" class="headerlink" title="使用方法"></a>使用方法</h3><p>   建议在<code>PE</code>环境下执行，在生成镜像前，选择对应配置文件执行即可。</p><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>   程序是通过加载配置文件来实现减肥操作的，添加自定义配置就可以支持其他版本的<code>Windows</code>系统。</p><h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><p>   配置文件包含一个必须的<code>xml</code>声明,一个包裹着无限个<code>dell</code>子节点的<code>nlite</code>节点。</p><p>   示例：</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token prolog">&lt;?xml version="1.0" encoding="gb2312"?&gt;</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>nlite</span><span class="token punctuation">&gt;</span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>del</span> <span class="token attr-name">display</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>补丁及多媒体游戏<span class="token punctuation">"</span></span>  <span class="token attr-name">check</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span>1</span> <span class="token attr-name">path</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>@C:\Windows\winsxs\Backup\*;C:\Program Files\Microsoft Games\Chess,Mahjong,Purble Place<span class="token punctuation">"</span></span>  <span class="token attr-name">save</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*<span class="token punctuation">"</span></span> <span class="token attr-name">cls</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>*.*<span class="token punctuation">"</span></span><span class="token punctuation">&gt;</span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>del</span><span class="token punctuation">&gt;</span></span>;添加更多。。。<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>nlite</span><span class="token punctuation">&gt;</span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从配置文件可以看到，主要是删除文件操作，在nlite节点里添加子节点del即可(支持属性见下表)。</p><h4 id="属性列表"><a href="#属性列表" class="headerlink" title="属性列表"></a>属性列表</h4><table><thead><tr><th>属性</th><th>必须</th><th>注释</th></tr></thead><tbody><tr><td>display</td><td>是</td><td>显示名称</td></tr><tr><td>check</td><td>否</td><td>是否选中</td></tr><tr><td>path</td><td>是</td><td>要删除的目录或文件组，每组支持同级目录多个文件或目录以”,”分割,组之间用”;“分割,支持通配符<code>*</code>,路径前面加<code>@</code>表示递归搜索(包含子目录)。</td></tr><tr><td>save</td><td>否</td><td>要排除的文件或目录 ，多个文件或目录之间用”,”隔开，支持通配符<code>*</code>。</td></tr><tr><td>cls</td><td>否</td><td>要清空内容的文件名称，多个文件之间用”,”隔开，支持通配符<code>*</code>。</td></tr></tbody></table><h3 id="下载地址"><a href="#下载地址" class="headerlink" title="下载地址"></a>下载地址</h3><p>  网盘下载：<a href="https://pan.baidu.com/s/1slnC2tR">https://pan.baidu.com/s/1slnC2tR</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h4&gt;&lt;p&gt;   Easy SysLite （Windows减肥专家）是一款开源的适合装机工作者的系统减肥工具，即适合新手也适合经验丰富的玩家，向导模式</summary>
      
    
    
    
    <category term="作品" scheme="http://www.nohacks.cn/categories/%E4%BD%9C%E5%93%81/"/>
    
    
    <category term="Easy SysLite" scheme="http://www.nohacks.cn/tags/Easy-SysLite/"/>
    
    <category term="Windows减肥专家" scheme="http://www.nohacks.cn/tags/Windows%E5%87%8F%E8%82%A5%E4%B8%93%E5%AE%B6/"/>
    
    <category term="系统减肥" scheme="http://www.nohacks.cn/tags/%E7%B3%BB%E7%BB%9F%E5%87%8F%E8%82%A5/"/>
    
  </entry>
  
  <entry>
    <title>Win7封装步骤</title>
    <link href="http://www.nohacks.cn/2016/04/19/win7-feng-zhuang-bu-zou.html"/>
    <id>http://www.nohacks.cn/2016/04/19/win7-feng-zhuang-bu-zou.html</id>
    <published>2016-04-19T00:45:15.000Z</published>
    <updated>2022-01-16T02:25:42.244Z</updated>
    
    <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h3><blockquote><p>本文主要介绍win7的减肥步骤以及Windows减肥专家的使用方法，由nohacks.cn原创，转载请注明出处！</p></blockquote><h3 id="搭建环境"><a href="#搭建环境" class="headerlink" title="搭建环境"></a>搭建环境</h3><p>虚拟机：  <a href="http://pan.baidu.com/s/1hs6QoYC">http://pan.baidu.com/s/1hs6QoYC</a><br>原版系统：<a href="ed2k://|file|cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.iso|3420557312|B58548681854236C7939003B583A8078|/">cn_windows_7_ultimate_with_sp1_x64_dvd_u_677408.ISO</a><br>PE: <a href="http://pan.baidu.com/s/1dEzhnmp">http://pan.baidu.com/s/1dEzhnmp</a></p><h3 id="减肥步骤"><a href="#减肥步骤" class="headerlink" title="减肥步骤"></a>减肥步骤</h3><p>1.安装原版，在输入用户名的地方按“CTRL+SHIFT+F3 ”进入官方部署环境（重启快照为“系统初始”）</p><p>2.恢复桌面图标，右键-个性化-更改桌面图标- 全部选中（控制面板除外）</p><p>3.操作中心取消所有通知，  操作中心-更改操作中心设置- 打勾项全部取消</p><p>   Win键+R键打开运行窗口，输入gpedit.msc来打开本地组策略编辑器,用户配置——管理模板——“开始”菜单和任务栏在里面找到 删除“操作中心”图标，选择启用.</p><p>4.关闭系统保护：计算机右键属性–高级系统设置–系统保护—配置——关闭系统保护（删除所有还原点）</p><p>5.转移虚拟内存：计算机右键属性–高级管理设置–高级–性能-设置-高级-更改。</p><p>6.关闭休眠 ：WIN+R  执行  powercfg -h off  重启电脑生效 （重启快照为“系统优化”）</p><p>  C盘此时占用应该在 ：7.3G 左右</p><p>7.（可选）转移用户资料到D盘 ： 打开用户文档- 选择要转移的文件夹-右键-属性-位置（收藏,文档,下载,图片,桌面）</p><p>8.安装王码五笔86 fox WIN7 X64位</p><p>9.安装维护小工具 （提取第三方GHOST制作自解压包）</p><p>10.安装IE11,安装清理补丁 kb2852386-x64   (IE11离线安装包：<a href="https://www.itiankong.net/forum.php?mod=viewthread&amp;tid=365272&amp;highlight=ie11">https://www.itiankong.net/forum.php?mod=viewthread&amp;tid=365272&amp;highlight=ie11</a>)</p><p>  （安装完后重启快照为“减肥前”，C盘此时占用应该在 ：7.3G 左右）</p><p>11.进PE模式，用Windows 减肥专家-选择win7配置- 执行   C盘占用： 5.91G</p><p>12.拷贝C盘文件（驱动,运行库,常用软件包 需控制在1.45G左右 ）  </p><p>13.用DISM++ 空间回收 全选  ，C盘此时占用应该在 ：7.18G 左右 （快照为“减肥后”）</p><p>14.ES4封装后（步骤略），最后 GHOST 最大压缩  体积为 3.99G</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;概述&quot;&gt;&lt;a href=&quot;#概述&quot; class=&quot;headerlink&quot; title=&quot;概述&quot;&gt;&lt;/a&gt;概述&lt;/h3&gt;&lt;blockquote&gt;
&lt;p&gt;本文主要介绍win7的减肥步骤以及Windows减肥专家的使用方法，由nohacks.cn原创，转载请注明出处！&lt;</summary>
      
    
    
    
    <category term="分享" scheme="http://www.nohacks.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="系统封装" scheme="http://www.nohacks.cn/tags/%E7%B3%BB%E7%BB%9F%E5%B0%81%E8%A3%85/"/>
    
    <category term="Win7封装" scheme="http://www.nohacks.cn/tags/Win7%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
  <entry>
    <title>ROS API 中文说明</title>
    <link href="http://www.nohacks.cn/2016/03/08/ros-api-zhong-wen-shuo-ming.html"/>
    <id>http://www.nohacks.cn/2016/03/08/ros-api-zhong-wen-shuo-ming.html</id>
    <published>2016-03-08T00:55:41.000Z</published>
    <updated>2022-01-19T03:38:25.262Z</updated>
    
    <content type="html"><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><blockquote><p>ROS 是 一个比较流行的软路由系统，它的强大在于它的高度定制性，它提供了应用程序编程使用的API接口，是它应用更加灵活，我们可以自己开发软件或WEB程序来操控ROS，比较实用的例子就是当用ROS管理小区网络时，我们用自己写的软件来管理上网账号，安全又方便，总之好处多多，本文基于官方API文档： HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API&quot;">http://wiki.mikrotik.com/wiki/API"</a> <a href="http://wiki.mikrotik.com/wiki/API">http://wiki.mikrotik.com/wiki/API</a> 翻译而成，结合了作者的理解，水平有限，难免有错漏的地方，望大家批评指正，由nohacks.cn原创，转载请注明出处！</p></blockquote><h1 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h1><p>1 简介<br>2 通讯协议<br>2.1 API语句<br>2.1.1 命令词<br>2.1.2 属性词<br>2.1.3 API 属性词<br>2.1.4 查询语句<br>2.1.5 回复语句<br>2.2 API 特定命令说明<br>3 初始登录<br>4 标签(.Tags )<br>5 API命令说明<br>5.1 查询词说明<br>5.2 OID<br>6 API 命令例子<br>6.1 /system/package/getall<br>6.2 /user/active/listen<br>6.3 /cancel, simultaneous commands<br>7 客户端程序例子<br>8 参考<br>8.1 API examples in the Wiki<br>8.2 API examples on the MikroTik Forum<br>8.3 API exmaples elsewhere </p><h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><h2 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h2><p>   应用程序编程接口（API），允许用户创建定制的软件解决方案与RouterOS的沟通，收集信息，调整配置和管理路由器。 API紧随命令行界面（CLI）的语法。它可以用来创建转换或自定义的配置工具，以帮助管理使用RouterOS的路由器。使用API需要RouterOS版本3.x或更高的版本。默认情况下，API使用端口8728，默认服务是禁用的。通讯服务的名称是API，请在IP-SERVER里开启，服务管理的详细信息，请参阅相应的手册部分。</p><h2 id="2-通讯协议："><a href="#2-通讯协议：" class="headerlink" title="2.通讯协议："></a>2.通讯协议：</h2><p>   应用程序与路由器的通信是通过发送和接收路由器的一个或多个编码的句子来完成的。一个句子是以零字符结尾的单词序列。词是句子以某种方式编码 -（编码长度是数据的一部分），路由器发送和接收回复并发送这些句子。每个句子发送到路由器使用API没有特定的顺序，每个命令字是以零字符标记结束的。当路由器接收到完整的句子（命令字，或多个属性的话，零字符结束），它就开始执行命令，并将结果返回给应用程序。</p><h3 id="2-1-API语句"><a href="#2-1-API语句" class="headerlink" title="2.1 API语句"></a>2.1 API语句</h3><p>   词是句子的一部分。每个词长都用某种方式编码 - 词长编码跟随词的内容就是一个句子。词的长度应为将要发送的字节计数（不包括词长编码）。<br>词长编码如下：</p><table><thead><tr><th>Value of length</th><th>#of bytes</th><th>Encoding</th></tr></thead><tbody><tr><td>0 &lt;= Len &lt;= 0x7F</td><td>1</td><td>Len, lowest byte  词长度</td></tr><tr><td>0x80 &lt;= Len &lt;= 0x3FFF</td><td>2</td><td>Len | 0x8000, two lower bytes</td></tr><tr><td>0x4000 &lt;= Len &lt;= 0x1FFFFF</td><td>3</td><td>Len | 0xC00000, three lower bytes</td></tr><tr><td>0x200000&lt;=Len &lt;= 0xFFFFFFF</td><td>4</td><td>Len | 0xE0000000</td></tr><tr><td>Len &gt;= 0x10000000</td><td>5</td><td>0xF0 and Len as four bytes</td></tr></tbody></table><p>对应的10进制：</p><table><thead><tr><th>长度</th><th>字节数</th><th>词长编码</th></tr></thead><tbody><tr><td>0 &lt;= 长度&lt;=127</td><td>1</td><td>长度低位</td></tr><tr><td>128 &lt;= 长度&lt;= 16383</td><td>2</td><td>位或（长度 ，32768）取低2位</td></tr><tr><td>16384&lt;= 长度&lt;= 2097151</td><td>3</td><td>位或（长度 ，12582912）取低3位</td></tr><tr><td>2097152 &lt;= 长度 &lt;= 268435455</td><td>4</td><td>位或（长度 ，3758096384）</td></tr><tr><td>长度 &gt;= 268435456</td><td>5</td><td>{240} + 到字节集(长度)</td></tr></tbody></table><p>每个词的编码长度，然后紧接着许多字节的词内容（词长编码 + 词内容）；<br>字组合成句子，以零字符结束；<br>最高长度可以达到0x7FFFFFFFFF,最高占用4字节；<br>词长编码字节（Len）总是在最前面（网络顺序）；<br>如果单词的第一个字节是&gt; =0xF8，那么它是一个保留的控制字节。未知的控制字节API客户端接收后无法继续，因为它不知道如何解释以下字节；<br>目前，控制字节不使用；<br>句子一般情况是这样的：&lt;词长编码&gt;&lt;词的内容&gt;，主要有5种类型：命令语句，属性语句，API属性语句，查询语句，回复语句；</p><h4 id="2-1-1-命令语句"><a href="#2-1-1-命令语句" class="headerlink" title="2.1.1 命令语句"></a>2.1.1 命令语句</h4><p>   在句子的第一个字是由名字（属性）和零长度的词终止字的命令。命令字的名称应以’/‘开始。命令中的名字，与命令行界面输入的一样，要注意的API中的命令不能有空格，需要用以’/‘替换，比如查看网卡信息 “/int print” 在API里就必须这样”/int/print”，不然无法识别；</p><p>注意：发送的命令必须严格按照这样的顺序：</p><pre class="line-numbers language-none"><code class="language-none">编码长度内容前缀"/"命令行的转换命令(空格用"/"替换)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>API特定的命令：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">getall login cancel<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>命令连接例子：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/login/ip/address/getall/user/active/listen/interface/vlan/remove/system/reboot<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="2-1-2-属性语句（Attribute-word）"><a href="#2-1-2-属性语句（Attribute-word）" class="headerlink" title="2.1.2 属性语句（Attribute word）"></a>2.1.2 属性语句（Attribute word）</h4><pre><code> 每个命令都有其自己的属性列表，命令内容决定属性。 属性结构由5部分组成，顺序如下：</code></pre><pre class="line-numbers language-none"><code class="language-none">编码长度内容前缀( ! - = )属性名称    分离符号( ! - = )    属性值（可以被忽略，说明这个属性没有值）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p> <code>注意：为了编码方便，一个命令里的多个属性赋值可以在一句里完成        属性值可以为空</code><br>没有编码的长度前缀的例子：</p><pre class="line-numbers language-none"><code class="language-none">=address=10.0.0.1        =name=iu=c3Eeg        =disable-running-check=yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>注意：属性词和API参数的顺序并不重要，不应依赖；</p><h4 id="2-1-3-API属性语句"><a href="#2-1-3-API属性语句" class="headerlink" title="2.1.3 API属性语句"></a>2.1.3 API属性语句</h4><p>  API属性语句的结构必须严格按照下面的顺序：</p><pre class="line-numbers language-none"><code class="language-none">编码长度内容与名称前缀"=."属性名称名称后缀符"="属性值<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>system/resource/print<br>=.proplist=uptime,cpu-load,uptime.oid,cpu-load.oid  </p><p>目前只有这样的API属性的标签。</p><p>注意：如果句子包含了属性语句标签，返回的每一个句子和从路由器标记句子将标记相同的标签，关于标签后面的章节有单独的介绍.</p><h4 id="2-1-4-查询语句"><a href="#2-1-4-查询语句" class="headerlink" title="2.1.4 查询语句"></a>2.1.4 查询语句</h4><p>   查询语句支持对参数进行一定范围内的模糊查询，在下面的章节中有单独介绍；<br>   例如句子使用查询词的属性：</p><pre class="line-numbers language-none"><code class="language-none">/interface/print?type=ether?type=vlan?#|!<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>查询语句以符号”?”开始，目前查询语句只支持”print”命令；<br>警告：查询语句始终是在最前面；</p><h4 id="2-1-5-回复语句"><a href="#2-1-5-回复语句" class="headerlink" title="2.1.5 回复语句"></a>2.1.5 回复语句</h4><p>   回复语句只能由路由器发送，它仅发送完整的句子，由客户端发送响应。</p><p>回复语句的第一个字是以”!”开始的；<br>发送的每一句话产生至少一个答复（如果连接没有得到终止）；<br>每一句的最后答复是答复的第一个字<code>!done</code> ；<br>错误和异常情况以<code>!trap</code>开始；<br>开始数据回复以<code>!re</code>开始；<br>如果连接被关闭，RouterOS发送<code>!fatal</code>作为致命的原因进行答复并且关闭连接；</p><h3 id="2-2-API语句"><a href="#2-2-API语句" class="headerlink" title="2.2 API语句"></a>2.2 API语句</h3><p>   API语句是使用API通信的主要对象</p><p>空的句子被忽略；<br>句子是以字符”0”作为结束标志的；<br>客户端登陆后发送句子有数量和大小的限制；<br>属性语句没有顺序区别，比如.proplist属性语句的顺序和计数就是多变的；<br>句子结构如下：</p><p>第一句话应该包含命令字；<br>应包含结束标志字符{0}；<br>可以包含0个或多个属性词，没有特定的顺序，不管什么属性词必须在句子里发送，属性词的顺序并不重要；<br>可以包含没有一个或几个查询词，查询词在句子的顺序是很重要的；</p><p>注：零长度的词(字节’0’)终止了一句,如果没有提供,路由器将无法测试句字的有效性，只能把收到的句子当做句子的一部分；</p><h2 id="3-初始登录"><a href="#3-初始登录" class="headerlink" title="3. 初始登录"></a>3. 初始登录</h2><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/login !done=ret=ebddd18303a54111e2dea05a92ab46b4/login=name=admin=response=001ea726ed53ae38520c8334f82d44c9f2 !done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意：每个命令和响应结束都有一句空的语句；<br>首先，客户端发送”/login”命令<br>路由器的回复包含”=ret=需要的参数”<br>客户端发送第二个”/login”命令,接着是用户名(“=name=username”)和密码(“=response=response”)验证命令；<br>在错误的情况下，答复包含= RET =错误消息。<br>在成功登录客户端的情况下，就可以开始发出命令。</p><h2 id="4-标签-tag"><a href="#4-标签-tag" class="headerlink" title="4. 标签(.tag)"></a>4. 标签(.tag)</h2><p>它是可以同时运行多个命令，而不必等待前一个完成。如果API的客户端是这样做的，需要区分命令的反应，它可以使用在命令句子’.tag’API的参数。<br>如果你有“.tag”命令句与非空值的参数，然后’.tag’参数完全相同的值将包含在该命令生成的所有答复。<br>如果不包括’.tag’参数，或它的值是空的，那么这个命令所有的反应将不会有“.tag”参数。</p><h2 id="5-API命令说明"><a href="#5-API命令说明" class="headerlink" title="5. API命令说明"></a>5. API命令说明</h2><ul><li><p>cancle（取消）<br>可选参数：=tag=tag ，取消所有正在运行的命令；<br>不能取消本身<br>所有取消的命令都是中断操作，并且在通常情况下会产生’!trap’ 和’!done’ 的回复;<br>请注意，”/cancel “是单独的命令，可以有它自己独特的’.tag’ 参数，它是不相关’=.tag’ 这个命令的参数；</p></li><li><p>listen (监听)<br>listen是在控制台print 命令可用的情况下使用，它没有预期中的效果（即可能无法正常工作）；<br>!re 数据回复句子会产生特定的项目列表中的一些变化；<br>当项目被删除或以其他任何方式清除，数据回复句子( ‘!re’）的属性值会包含’=.dead=yes’ ;<br>此命令不会终止。终止使用取消命令”/cancle”</p></li><li><p>getall （获取）<br>getall命令是在控制台print命令可用的情况下使用，自3.21版本以后的getall命令是print命令的别名。<br>回复包含= .id =项目内部编号属性</p></li><li><p>print  （显示）<br>API的print命令和控制台的print命令的不同主要有以下几个方面：<br>虽然参数不支持，但可以使用查询词（见下文）筛选项目。<br>传回的项目可能有额外的属性。<br>返回的属性的顺序是没有定义的。<br>如果列表中包含重复的条目，这些条目的处理没有被定义。<br>如果属性格式目前是在.proplist里，但项目里没有这个属性，该项目没有这个属性的值，（?名称将评估该项目为假）<br>如果没有设置.proplist参数，将打印所有的属性，甚至那些比较耗时的项目（如文件内容性能记数),因此推荐使用.proplist参数，设置=detail= argument，虽然可能会有遗漏，但是换回的却是高性能。<br>查询<br>print命令接受限制返回的句子设置的查询词。此功能是自RouterOS的3.21开始的。</p></li></ul><h3 id="5-1-查询词说明"><a href="#5-1-查询词说明" class="headerlink" title="5.1 查询词说明"></a>5.1 查询词说明</h3><p>查询词以符号”?’开始。<br>查询词的顺序是在最前面的，从第一个字开始模糊查询。<br>对查询列表中每个项目进行评估，如果查询成功，项目被处理，如果查询失败，项目将被忽略。<br>查询评估在堆栈使用布尔逻辑值。最初，堆栈包含无限量的“真”值。在评估结束时，如果堆栈包含至少一个“假”值，查询失败。<br>查询词按照下列规定操作：</p><table><thead><tr><th>查询词</th><th>描叙</th></tr></thead><tbody><tr><td>?name</td><td>如果项目属性名称的值不为空，堆栈压入真，否则压入假</td></tr><tr><td>?-name</td><td>如果项目属性名称的值为空，堆栈压入真，否则压入假</td></tr><tr><td>?name=x 或 ?=name=x</td><td>如果项目属性名称的值=x,堆栈压入真，否则压入假</td></tr><tr><td>?&lt;name=x</td><td>如果项目属性名称的值&lt;x ,堆栈压入真，否则压入假</td></tr><tr><td>?&gt;name=x</td><td>如果项目属性名称的值&gt;x ,堆栈压入真，否则压入假</td></tr></tbody></table><p><code>?#</code> 操作符适用于操作在堆栈的值。<br>操作字符串是从左向右计算的。<br>任何其他的字符或单词的末尾的十进制数字序列被解释为一个堆栈指数。最高值指数0。<br>后跟一个字符的索引，压入该指数值的副本<br>指数是由单词的末尾替换所有值与该指数的值。<br>！操作符是反义字符，替换堆顶值为反义值；<br>&amp; 操作符是逻辑”与”操作符，从堆栈弹出2个值，进行逻辑与操作并将结果压于入堆栈<br>| 操作符是逻辑”或”操作符, 从堆栈弹出2个值，进行逻辑“或”操作并将结果压于入堆栈<br>. 索引后什么都不做<br>. 另一个字符后压入副本值到堆顶。</p><p>例子:<br>取得所有的以太网和VLAN接口：</p><pre class="line-numbers language-none"><code class="language-none">/interface/print?type=ether?type=vlan?#|<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>获取所有有备注的路由：</p><pre class="line-numbers language-none"><code class="language-none">/ip/route/print?&gt;comment=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>设置<br>set命令必须包含查询属性：”.id”, ,顺序并不重要，查询词可以是num,name或者Comment等可以区分对象的属性值，支持模糊查询，如果有多个对象的属性值包含查询词，只会修改找到的第一个对象，不会全部修改。</p><p>一个修改PPP用户的例子：<br>增加一个用户名为nohacks，密码为test,备注为comment的PPPoE服务的用户账户。</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> /ppp/secret/add  =name=nohacks =service=pppoe=password=test=Comment=comment!done=ret=*1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第一种方法：通过具有唯一性的num属性进行修改</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">   /ppp/secret/set=.id=*1=name=nohacks=password=test      !done  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二种方法：通过具有唯一性的name属性进行修改</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> /ppp/secret/set=.id=nohacks=name=nohacks=password=test    !done   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>.id属性支持模糊查询，例如<br>=.id=nohac<br> 也可以成功修改nohacks账号<br>但要注意的是如果有多个对象包含查询词，比如还有一个账户anohac，这个命令只会修改序号靠前的账户。</p><p>第三种方法：通过comment属性进行修改</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">    /ppp/secret/set=.id=comment=name=nohack=password=test        !done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="5-2-OID"><a href="#5-2-OID" class="headerlink" title="5.2 OID"></a>5.2 OID</h3><p>print命令可以返回属性是在SNMP OID值。此功能出现在3.23版本以后。<br>在控制台，OID值可以运行’print oid’命令看出。在API这些属性有”.OID”结束的名称，并可以加入他们的名字的值用”.proplist”检索。一个例子：</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/system/resource/print  =.proplist=uptime,cpu-load,uptime.oid,cpu-load.oid    !re  =uptime=01:22:53  =cpu-load=0  =uptime.oid=.1.3.6.1.2.1.1.3.0  =cpu-load.oid=.1.3.6.1.2.1.25.3.3.1.2.1   !done  <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="6-API-命令例子"><a href="#6-API-命令例子" class="headerlink" title="6. API 命令例子"></a>6. API 命令例子</h2><h3 id="6-1-system-package-getall"><a href="#6-1-system-package-getall" class="headerlink" title="6.1 /system/package/getall"></a>6.1 /system/package/getall</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">/system/package/getall /system/package/getall !re=.id=*5802=disabled=no=name=routeros-x86=version=3.0beta2=build-time=oct/18/2006 16:24:41=scheduled= !re=.id=*5805=disabled=no=name=system=version=3.0beta2=build-time=oct/18/2006 17:20:46=scheduled=<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>… 更多 !re 回复句子 …</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell"> !re=.id=*5902=disabled=no=name=advanced-tools=version=3.0beta2=build-time=oct/18/2006 17:20:49=scheduled= !done<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-2-user-active-listen"><a href="#6-2-user-active-listen" class="headerlink" title="6.2 /user/active/listen"></a>6.2 /user/active/listen</h3><pre class="line-numbers language-none"><code class="language-none">/user/active/listen /user/active/listen !re=.id=*68=radius=no=when=oct/24/2006 08:40:42=name=admin=address=0.0.0.0=via=console !re=.id=*68=.dead=yes<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="6-3-cancel-simultaneous-commands"><a href="#6-3-cancel-simultaneous-commands" class="headerlink" title="6.3 /cancel, simultaneous commands"></a>6.3 /cancel, simultaneous commands</h3><pre class="line-numbers language-none"><code class="language-none">/login !done=ret=856780b7411eefd3abadee2058c149a3/login=name=admin=response=005062f7a5ef124d34675bf3e81f56c556 !done-- first start listening for interface changes (tag is 2)/interface/listen.tag=2-- disable interface (tag is 3)/interface/set=disabled=yes=.id=ether1.tag=3-- this is done for disable command (tag 3) !done.tag=3-- enable interface (tag is 4)/interface/set=disabled=no=.id=ether1.tag=4-- this update is generated by change made by first set command (tag 3) !re=.id=*1=disabled=yes=dynamic=no=running=no=name=ether1=mtu=1500=type=ether.tag=2-- this is done for enable command (tag 4) !done.tag=4-- get interface list (tag is 5)/interface/getall.tag=5-- this update is generated by change made by second set command (tag 4) !re=.id=*1=disabled=no=dynamic=no=running=yes=name=ether1=mtu=1500=type=ether.tag=2-- these are replies to getall command (tag 5) !re=.id=*1=disabled=no=dynamic=no=running=yes=name=ether1=mtu=1500=type=ether.tag=5 !re=.id=*2=disabled=no=dynamic=no=running=yes=name=ether2=mtu=1500=type=ether.tag=5-- here interface getall ends (tag 5) !done.tag=5-- stop listening - request to cancel command with tag 2, cancel itself uses tag 7/cancel=tag=2.tag=7-- listen command is interrupted (tag 2) !trap=category=2=message=interrupted.tag=2-- cancel command is finished (tag 7) !done.tag=7-- listen command is finished (tag 2) !done.tag=2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="7-客户端例子"><a href="#7-客户端例子" class="headerlink" title="7. 客户端例子"></a>7. 客户端例子</h2><p>this is simple API client in Python2<br>example for Python3<br>usage: api.py ip-address username password<br>after that type words from keyboard, terminating them with newline<br>Since empty word terminates sentence, you should press enter twice after last word before sentence will be sent to router. </p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python</span><span class="token keyword">import</span> sys<span class="token punctuation">,</span> posix<span class="token punctuation">,</span> time<span class="token punctuation">,</span> md5<span class="token punctuation">,</span> binascii<span class="token punctuation">,</span> socket<span class="token punctuation">,</span> select<span class="token keyword">class</span> <span class="token class-name">ApiRos</span><span class="token punctuation">:</span>    <span class="token string">"Routeros api"</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sk<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>sk <span class="token operator">=</span> sk        self<span class="token punctuation">.</span>currenttag <span class="token operator">=</span> <span class="token number">0</span>          <span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> username<span class="token punctuation">,</span> pwd<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> repl<span class="token punctuation">,</span> attrs <span class="token keyword">in</span> self<span class="token punctuation">.</span>talk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/login"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            chal <span class="token operator">=</span> binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span>attrs<span class="token punctuation">[</span><span class="token string">'=ret'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        md <span class="token operator">=</span> md5<span class="token punctuation">.</span>new<span class="token punctuation">(</span><span class="token punctuation">)</span>        md<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token string">'\x00'</span><span class="token punctuation">)</span>        md<span class="token punctuation">.</span>update<span class="token punctuation">(</span>pwd<span class="token punctuation">)</span>        md<span class="token punctuation">.</span>update<span class="token punctuation">(</span>chal<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>talk<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"/login"</span><span class="token punctuation">,</span> <span class="token string">"=name="</span> <span class="token operator">+</span> username<span class="token punctuation">,</span>                   <span class="token string">"=response=00"</span> <span class="token operator">+</span> binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>md<span class="token punctuation">.</span>digest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">talk</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>writeSentence<span class="token punctuation">(</span>words<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">return</span>        r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            i <span class="token operator">=</span> self<span class="token punctuation">.</span>readSentence<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>            reply <span class="token operator">=</span> i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>            attrs <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token keyword">for</span> w <span class="token keyword">in</span> i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                j <span class="token operator">=</span> w<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    attrs<span class="token punctuation">[</span>w<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">''</span>               <span class="token keyword">else</span><span class="token punctuation">:</span>                    attrs<span class="token punctuation">[</span>w<span class="token punctuation">[</span><span class="token punctuation">:</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> w<span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span>            r<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>reply<span class="token punctuation">,</span> attrs<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> reply <span class="token operator">==</span> <span class="token string">'!done'</span><span class="token punctuation">:</span> <span class="token keyword">return</span> r    <span class="token keyword">def</span> <span class="token function">writeSentence</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> words<span class="token punctuation">)</span><span class="token punctuation">:</span>        ret <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> w <span class="token keyword">in</span> words<span class="token punctuation">:</span>            self<span class="token punctuation">.</span>writeWord<span class="token punctuation">(</span>w<span class="token punctuation">)</span>            ret <span class="token operator">+=</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>writeWord<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ret    <span class="token keyword">def</span> <span class="token function">readSentence</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>            w <span class="token operator">=</span> self<span class="token punctuation">.</span>readWord<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> w <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span> <span class="token keyword">return</span> r            r<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w<span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">writeWord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> w<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span> <span class="token string">"&lt;&lt;&lt; "</span> <span class="token operator">+</span> w        self<span class="token punctuation">.</span>writeLen<span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>w<span class="token punctuation">)</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span>w<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">readWord</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        ret <span class="token operator">=</span> self<span class="token punctuation">.</span>readStr<span class="token punctuation">(</span>self<span class="token punctuation">.</span>readLen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span> <span class="token string">"&gt;&gt;&gt; "</span> <span class="token operator">+</span> ret        <span class="token keyword">return</span> ret    <span class="token keyword">def</span> <span class="token function">writeLen</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> l<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> l <span class="token operator">&lt;</span> <span class="token number">0x80</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> l <span class="token operator">&lt;</span> <span class="token number">0x4000</span><span class="token punctuation">:</span>            l <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x8000</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> l <span class="token operator">&lt;</span> <span class="token number">0x200000</span><span class="token punctuation">:</span>            l <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0xC00000</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> l <span class="token operator">&lt;</span> <span class="token number">0x10000000</span><span class="token punctuation">:</span>                    l <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0xE0000000</span>                     self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>                                   self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">0xF0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>l <span class="token operator">&gt;&gt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>writeStr<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>l <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">readLen</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>                      c <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readStr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x00</span><span class="token punctuation">:</span>                  <span class="token keyword">pass</span>                            <span class="token keyword">elif</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">0xC0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0x80</span><span class="token punctuation">:</span>                c <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0xC0</span>                          c <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span>                             c <span class="token operator">+=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readStr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">0xE0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xC0</span><span class="token punctuation">:</span>                c <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0xE0</span>                          c <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span>                             c <span class="token operator">+=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readStr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                c <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span>                             c <span class="token operator">+=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readStr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">0xF0</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xE0</span><span class="token punctuation">:</span>                c <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token number">0xF0</span>                          c <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span>                             c <span class="token operator">+=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readStr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                c <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span>                             c <span class="token operator">+=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readStr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                c <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span>                             c <span class="token operator">+=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readStr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> <span class="token punctuation">(</span>c <span class="token operator">&amp;</span> <span class="token number">0xF8</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xF0</span><span class="token punctuation">:</span>                c <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readStr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                 c <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span>                             c <span class="token operator">+=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readStr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                c <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span>                             c <span class="token operator">+=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readStr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                c <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">8</span>                             c <span class="token operator">+=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>readStr<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> c                        <span class="token keyword">def</span> <span class="token function">writeStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>                              <span class="token keyword">while</span> n <span class="token operator">&lt;</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                     r <span class="token operator">=</span> self<span class="token punctuation">.</span>sk<span class="token punctuation">.</span>send<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">[</span>n<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> r <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">,</span> <span class="token string">"connection closed by remote end"</span>            n <span class="token operator">+=</span> r                      <span class="token keyword">def</span> <span class="token function">readStr</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>              ret <span class="token operator">=</span> <span class="token string">''</span>                            <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span> <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>                s <span class="token operator">=</span> self<span class="token punctuation">.</span>sk<span class="token punctuation">.</span>recv<span class="token punctuation">(</span>length <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> s <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span> <span class="token keyword">raise</span> RuntimeError<span class="token punctuation">,</span> <span class="token string">"connection closed by remote end"</span>            ret <span class="token operator">+=</span> s        <span class="token keyword">return</span> ret<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> socket<span class="token punctuation">.</span>socket<span class="token punctuation">(</span>socket<span class="token punctuation">.</span>AF_INET<span class="token punctuation">,</span> socket<span class="token punctuation">.</span>SOCK_STREAM<span class="token punctuation">)</span>    s<span class="token punctuation">.</span>connect<span class="token punctuation">(</span><span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">8728</span><span class="token punctuation">)</span><span class="token punctuation">)</span>      apiros <span class="token operator">=</span> ApiRos<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>                 apiros<span class="token punctuation">.</span>login<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sys<span class="token punctuation">.</span>argv<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    inputsentence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token number">1</span><span class="token punctuation">:</span>        r <span class="token operator">=</span> select<span class="token punctuation">.</span>select<span class="token punctuation">(</span><span class="token punctuation">[</span>s<span class="token punctuation">,</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> s <span class="token keyword">in</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment"># something to read in socket, read sentence</span>            x <span class="token operator">=</span> apiros<span class="token punctuation">.</span>readSentence<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> sys<span class="token punctuation">.</span>stdin <span class="token keyword">in</span> r<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment"># read line from input and strip off newline</span>            l <span class="token operator">=</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span>            l <span class="token operator">=</span> l<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token comment"># if empty line, send sentence and start with new</span>            <span class="token comment"># otherwise append to input sentence</span>            <span class="token keyword">if</span> l <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>                apiros<span class="token punctuation">.</span>writeSentence<span class="token punctuation">(</span>inputsentence<span class="token punctuation">)</span>                inputsentence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                inputsentence<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="例子运行实例"><a href="#例子运行实例" class="headerlink" title="例子运行实例"></a>例子运行实例</h6><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">debian@localhost:~/api-test$ ./api.py 10.0.0.1 admin &lt;&lt;&lt; /login&lt;&lt;&lt;&gt;&gt;&gt; !done&gt;&gt;&gt; =ret=93b438ec9b80057c06dd9fe67d56aa9a&gt;&gt;&gt; &lt;&lt;&lt; /login&lt;&lt;&lt; =name=admin&lt;&lt;&lt; =response=00e134102a9d330dd7b1849fedfea3cb57&lt;&lt;&lt; &gt;&gt;&gt; !done&gt;&gt;&gt; /user/getall&lt;&lt;&lt; /user/getall&lt;&lt;&lt; &gt;&gt;&gt; !re&gt;&gt;&gt; =.id=*1&gt;&gt;&gt; =disabled=no&gt;&gt;&gt; =name=admin&gt;&gt;&gt; =group=full&gt;&gt;&gt; =address=0.0.0.0/0&gt;&gt;&gt; =netmask=0.0.0.0&gt;&gt;&gt; &gt;&gt;&gt; !done&gt;&gt;&gt; <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="8-参考资料"><a href="#8-参考资料" class="headerlink" title="8.参考资料"></a>8.参考资料</h2><p>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_command_notes&quot;API">http://wiki.mikrotik.com/wiki/API_command_notes"API</a> command notes</p><h3 id="8-1-API-examples-in-the-Wiki"><a href="#8-1-API-examples-in-the-Wiki" class="headerlink" title="8.1 API examples in the Wiki"></a>8.1 API examples in the Wiki</h3><p>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_PHP_class&quot;in">http://wiki.mikrotik.com/wiki/API_PHP_class"in</a> PHP#1<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_PHP_package&quot;in">http://wiki.mikrotik.com/wiki/API_PHP_package"in</a> PHP using PEAR2#2<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_Delphi&quot;in">http://wiki.mikrotik.com/wiki/API_Delphi"in</a> Delphi#1<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_Delphi_Client&quot;in">http://wiki.mikrotik.com/wiki/API_Delphi_Client"in</a> Delphi#2<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_in_C&quot;in">http://wiki.mikrotik.com/wiki/API_in_C"in</a> C<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_in_C_using_winsock&quot;in">http://wiki.mikrotik.com/wiki/API_in_C_using_winsock"in</a> C using winsock<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_In_CPP&quot;API">http://wiki.mikrotik.com/wiki/API_In_CPP"API</a> in C++<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_in_C_Sharp&quot;in">http://wiki.mikrotik.com/wiki/API_in_C_Sharp"in</a> C#<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_ActionScript_3_class&quot;in">http://wiki.mikrotik.com/wiki/API_ActionScript_3_class"in</a> Flash Actionscript 3<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_Ruby_class&quot;in">http://wiki.mikrotik.com/wiki/API_Ruby_class"in</a> Ruby on rails<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_in_VB_dot_NET&quot;in">http://wiki.mikrotik.com/wiki/API_in_VB_dot_NET"in</a> VB .NET<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/API_in_Java&quot;in">http://wiki.mikrotik.com/wiki/API_in_Java"in</a> java<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/MikroNode&quot;in">http://wiki.mikrotik.com/wiki/MikroNode"in</a> NodeJS<br>HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/Manual%3AAPI_Python3&quot;Python3">http://wiki.mikrotik.com/wiki/Manual%3AAPI_Python3"Python3</a></p><h3 id="8-2-API-examples-on-the-MikroTik-Forum"><a href="#8-2-API-examples-on-the-MikroTik-Forum" class="headerlink" title="8.2 API examples on the MikroTik Forum"></a>8.2 API examples on the MikroTik Forum</h3><p>HYPERLINK “<a href="http://forum.mikrotik.com/viewtopic.php?f=9&amp;t=22744&quot;in">http://forum.mikrotik.com/viewtopic.php?f=9&amp;t=22744"in</a> Perlby Hugh<br>HYPERLINK “<a href="http://forum.mikrotik.com/viewtopic.php?f=9&amp;t=28821&quot;in">http://forum.mikrotik.com/viewtopic.php?f=9&amp;t=28821"in</a> Delphiby Rodolfo<br>HYPERLINK “<a href="http://forum.mikrotik.com/viewtopic.php?f=9&amp;t=31555&quot;in">http://forum.mikrotik.com/viewtopic.php?f=9&amp;t=31555"in</a> Delphi #2by Chupaka<br>HYPERLINK “<a href="http://forum.mikrotik.com/viewtopic.php?f=9&amp;t=51861&quot;in">http://forum.mikrotik.com/viewtopic.php?f=9&amp;t=51861"in</a> NodeJSby Trakkasure<br>HYPERLINK “<a href="http://forum.mikrotik.com/viewtopic.php?f=2&amp;t=51584&quot;in">http://forum.mikrotik.com/viewtopic.php?f=2&amp;t=51584"in</a> VBby lucho512<br>HYPERLINK “<a href="http://forum.mikrotik.com/viewtopic.php?f=9&amp;t=56869&quot;on">http://forum.mikrotik.com/viewtopic.php?f=9&amp;t=56869"on</a> PHP for sparks frameworkby vthinkteam</p><h3 id="8-3-API-exmaples-elsewhere"><a href="#8-3-API-exmaples-elsewhere" class="headerlink" title="8.3 API exmaples elsewhere"></a>8.3 API exmaples elsewhere</h3><p>HYPERLINK “<a href="http://code.google.com/p/mikrotik4net/&quot;in">http://code.google.com/p/mikrotik4net/"in</a> .NET (C#) high-level api solutionby danikf<br>HYPERLINK “<a href="https://sourceforge.net/projects/netrouteros/&quot;in">https://sourceforge.net/projects/netrouteros/"in</a> PHPby boen_robot<br>Retrieved from “HYPERLINK “<a href="http://wiki.mikrotik.com/wiki/Manual:API&quot;http://wiki.mikrotik.com/wiki/Manual:API&quot;">http://wiki.mikrotik.com/wiki/Manual:API"http://wiki.mikrotik.com/wiki/Manual:API"</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;ROS 是 一个比较流行的软路由系统，它的强大在于它的高度定制性，它提供了应用程序编程使用的API接口，是它应用更</summary>
      
    
    
    
    <category term="分享" scheme="http://www.nohacks.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="ROS API" scheme="http://www.nohacks.cn/tags/ROS-API/"/>
    
  </entry>
  
  <entry>
    <title>Windows Hook 易核心编程&lt;1&gt;勾子基本概念</title>
    <link href="http://www.nohacks.cn/2011/09/30/windows-hook-yi-yu-yan-he-xin-bian-cheng.html"/>
    <id>http://www.nohacks.cn/2011/09/30/windows-hook-yi-yu-yan-he-xin-bian-cheng.html</id>
    <published>2011-09-30T03:08:12.000Z</published>
    <updated>2022-01-19T03:42:24.589Z</updated>
    
    <content type="html"><![CDATA[<h3 id="本期导读"><a href="#本期导读" class="headerlink" title="本期导读"></a>本期导读</h3><p>   什么叫勾子,勾子又起什么作用,它有那些类别,怎么使用,等等这些问题将在本期找到答案</p><h3 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h3><p>   钩子(Hook)，是Windows消息处理机制的一个平台,应用程序可以在上面设置子程以监视指定窗口的某种消息，而且所监视的窗口可以是其他进程所创建的。当消息到达后，在目标窗口处理函数之前处理它。钩子机制允许应用程序截获处理window消息或特定事件。<br>    钩子实际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，在没有到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控<br>制权。这时钩子函数即可以加工处理（改变）该消息，也可以不作处理而继续传递该消息，还可以强制结束消息的传递。</p><h3 id="运行机制"><a href="#运行机制" class="headerlink" title="运行机制"></a>运行机制</h3><h4 id="1、钩子链表和钩子子程"><a href="#1、钩子链表和钩子子程" class="headerlink" title="1、钩子链表和钩子子程"></a>1、钩子链表和钩子子程</h4><p>   每一个Hook都有一个与之相关联的指针列表，称之为钩子链表，由系统来维护。这个列表的指针指向指定的，应用程序定义的，被Hook子程调用的回调函数，也就是该钩子的各个处理子程。当与指定的Hook类型关联的消息发生时，系统就把这个消息传递到Hook子程。一些Hook子程可以只监视消息，或者修改消息，或者停止消息的前进，避免这些消息传递到下一个Hook子程或者目的窗口。最近安装的钩子放在链的开始，而最早安装的钩子放在最后，也就是后加入的先获得控制权。<br>    Windows 并不要求钩子子程的卸载顺序一定得和安装顺序相反。每当有一个钩子被卸载，Windows 便释放其占用的内存，并更新整个Hook链表。如果程序安装了钩子，但是在尚未卸载钩子之前就结束了，那么系统会自动为它做卸载钩子的操作。<br>    钩子子程是一个应用程序定义的回调函数(CALLBACK Function),不能定义成某个类的成员函数，只能定义为普通的C函数。用以监视系统或某一特定类型的事件，这些事件可以是与某一特定线程关联的，也可以是系统中所有线程的事件。</p><p>钩子子程必须按照以下的语法：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">LRESULT CALLBACK <span class="token function">HookProc</span><span class="token punctuation">(</span><span class="token keyword">int</span> nCode<span class="token punctuation">,</span> WPARAM wParam<span class="token punctuation">,</span> LPARAM lParam<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>当然上面是在C中的表达方式,意思是说这个直定义的钩子子程必须有3个参数,在易中应象这样表达:</p><pre class="line-numbers language-none"><code class="language-none">.子程序 HookProc, 整数型, 公开, 钩子回调函数.参数 ncode, 整数型.参数 wParam, 整数型.参数 lParam, 整数型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>HookProc是应用程序定义的名字。<br>nCode参数是Hook代码，Hook子程使用这个参数来确定任务。这个参数的值依赖于Hook类型，每一种Hook都有自己的Hook代码特征字符集。<br>wParam和lParam参数的值依赖于Hook代码，但是它们的典型值是包含了关于发送或者接收消息的信息。</p><h4 id="2、钩子的安装与释放"><a href="#2、钩子的安装与释放" class="headerlink" title="2、钩子的安装与释放"></a>2、钩子的安装与释放</h4><h5 id="钩子的安装"><a href="#钩子的安装" class="headerlink" title="钩子的安装"></a>钩子的安装</h5><p>使用API函数SetWindowsHookEx()把一个应用程序定义的钩子子程安装到钩子链表中。SetWindowsHookEx函数总是在Hook链的开头安装Hook子程。当指定类型的Hook监视的事件发生时，系统就调用与这个Hook关联的Hook链的开头的Hook子程。每一个Hook链中的Hook子程都决定是否把这个事件传递到下一个Hook子程。Hook子程传递事件到下一个Hook子程需要调用CallNextHookEx函数。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">HHOOK <span class="token function">SetWindowsHookEx</span><span class="token punctuation">(</span> 　　　　　<span class="token keyword">int</span> idHook<span class="token punctuation">,</span>    <span class="token comment">//参数&lt;1&gt;</span>　　　　　          HOOKPROC lpfn<span class="token punctuation">,</span>  <span class="token comment">//参数&lt;2&gt;</span>                                     HINSTANCE hMod<span class="token punctuation">,</span>   <span class="token comment">//参数&lt;3&gt;</span>                                       DWORD dwThreadId  <span class="token comment">//参数&lt;4&gt;</span>                              　　　　　 <span class="token punctuation">)</span><span class="token punctuation">;</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   在易中则这样声明DLL:</p> <pre class="line-numbers language-none"><code class="language-none">.DLL命令 api_SetWindowsHookExA, 整数型, , "SetWindowsHookExA"    .参数 idHook, 整数型    .参数 lpfn, 子程序指针    .参数 nMod, 整数型    .参数 dwThreadID, 整数型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>参数&lt;1&gt;idHook是钩子的类型，即它处理的消息类型<br>参数&lt;2&gt;lpfn是钩子子程的地址指针。如果dwThreadId参数为0,或是一个由别的进程创建的线程的标识<br>       lpfn必须指向DLL中的钩子子程。除此以外，lpfn可以指向当前进程的一段钩子子程代码。<br>参数&lt;3&gt;nMod是应用程序实例的句柄。标识包含lpfn所指的子程的DLL,如果dwThreadId 标识当前进程创建的一个线程，而且子程代码位于当前进程，hMod必须为NULL。可以很简单的设定其为本         应用程序的实例句柄。<br>参数&lt;4&gt;dwThreadID:与安装的钩子子程相关联的线程的标识符, 如果为0，钩子子程与所有的线程关联即为全局钩子。函数成功则返回钩子子程的句柄，失败返回(NULL)0。</p><h5 id="钩子的循环"><a href="#钩子的循环" class="headerlink" title="钩子的循环"></a>钩子的循环</h5><p>  以上所说的钩子子程与线程相关联是指在一钩子链表中发给该线程的消息同时发送给钩子子程，且被钩子子程先处理。在钩子子程中调用得到控制权的钩子函数在完成对消息的处理后，如果想要该消息继续传递，那么它必须调用另外一个SDK中的API函数CallNextHookEx来传递它，以执行钩子链表所指的下一个钩子子程。这个函数成功时返回钩子链中下一个钩子过程的返回值，返回值的类型依赖于钩子的类型。这个函数的原型如下：<br>  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c">LRESULT <span class="token function">CallNextHookEx</span><span class="token punctuation">(</span>HHOOK hhook<span class="token punctuation">;</span><span class="token keyword">int</span> nCode<span class="token punctuation">;</span>WPARAM wParam<span class="token punctuation">;</span>LPARAM lParam<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><br>易语言版本：<p></p><pre class="line-numbers language-none"><code class="language-none">.DLL命令 CallNextHookEx, 整数型, , "CallNextHookEx"    .参数 hhook, 整数型    .参数 nCode, 整数型    .参数 wParam, 整数型    .参数 lParam, 整数型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>hhook为当前钩子的句柄，由SetWindowsHookEx()函数返回。<br>NCode为传给钩子过程的事件代码。<br>wParam和lParam 分别是传给钩子子程的wParam值，其具体含义与钩子类型有关。<br>钩子函数也可以通过直接返回(TRUE)真来丢弃该消息，并阻止该消息的传递。否则的话，其他安装了钩子的应用程序将不会接收到钩子的通知而且还有可能产生不正确的结果。</p><h5 id="钩子的卸载"><a href="#钩子的卸载" class="headerlink" title="钩子的卸载"></a>钩子的卸载</h5><p>  钩子在使用完之后需要用UnHookWindowsHookEx()卸载，否则会造成麻烦。释放钩子比较简单，UnHookWindowsHookEx()只有一个参数。函数原型如下：<br>  </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token function">UnHookWindowsHookEx</span><span class="token punctuation">(</span>HHOOK hhk<span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><br>易语言版本：<p></p><pre class="line-numbers language-none"><code class="language-none">.DLL命令 api_UnhookWindowsHookEx, 逻辑型, , "UnhookWindowsHookEx"    .参数 hhook, 整数型函数成功返回(TRUE)真，否则返回(FALSE)假。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="3、一些运行机制"><a href="#3、一些运行机制" class="headerlink" title="3、一些运行机制"></a>3、一些运行机制</h4><p>   在Win16环境中，DLL的全局数据对每个载入它的进程来说都是相同的；而在Win32环境中，情况却发生了变化，DLL函数中的代码所创建的任何对象（包括变量）都归调用它的线程或进程所有。当进程在载入DLL时，操作系统自动把DLL地址映射到该进程的私有空间，也就是进程的虚拟地址空间，而且也复制该DLL的全局数据的一份拷贝到该进程空间。也就是说每个进程所拥有的相同的DLL的全局数据，它们的名称相同，但其值却并不一定是相同的，而且是互不干涉的。<br>   因此，在Win32环境下要想在多个进程中共享数据，就必须进行必要的设置。在访问同一个Dll的各进程之间共享存储器是通过存储器映射文件技术实现的。也可以把这些需要共享的数据分离出来，放置在一个独立的数据段里，并把该段的属性设置为共享。必须给这些变量赋初值，否则编译器会把没有赋初始值的变量放在一个叫未被初始化的数据段中。<br>#pragma data_seg预处理指令用于设置共享数据段。例如：<br>#pragma data_seg(“SharedDataName”)<br>HHOOK hHook=NULL;<br>#pragma data_seg()<br>    在#pragma data_seg(“SharedDataName”)和#pragma data_seg()之间的所有变量将被访问该Dll的所有进程看到和共享。再加上一条指令#pragma comment(linker,”/section:.SharedDataName,rws”),那么这个数据节中的数据可以在所有DLL的实例之间共享。所有对这些数据的操作都针对同一个实例的，而不是在每个进程的地址空间中都有一份。<br>    当进程隐式或显式调用一个动态库里的函数时，系统都要把这个动态库映射到这个进程的虚拟地址空间里(以下简称”地址空间”)。这使得DLL成为进程的一部分，以这个进程的身份执行，使用这个进程的堆栈。</p><h4 id="4、系统钩子与线程钩子"><a href="#4、系统钩子与线程钩子" class="headerlink" title="4、系统钩子与线程钩子"></a>4、系统钩子与线程钩子</h4><p>SetWindowsHookEx()函数的最后一个参数决定了此钩子是系统钩子还是线程钩子。<br>线程勾子用于监视指定线程的事件消息。线程勾子一般在当前线程或者当前线程派生的线程内。<br>系统勾子监视系统中的所有线程的事件消息。因为系统勾子会影响系统中所有的应用程序，所以勾子函数必须放在独立的动态链接库(DLL) 中。系统自动将包含”钩子回调函数”的DLL映射到受钩子函数影响的所有进程的地址空间中，即将这个DLL注入了那些进程。</p><p>几点说明：<br>（1）如果对于同一事件（如鼠标消息）既安装了线程勾子又安装了系统勾子，那么系统会自动先调用线程勾子，然后调用系统勾子。<br>（2）对同一事件消息可安装多个勾子处理过程，这些勾子处理过程形成了勾子链。当前勾子处理结束后应把勾子信息传递给下一个勾子函数。<br>（3）勾子特别是系统勾子会消耗消息处理时间，降低系统性能。只有在必要的时候才安装勾子，在使用完毕后要及时卸载。</p><hr><h3 id="钩子类型"><a href="#钩子类型" class="headerlink" title="钩子类型"></a>钩子类型</h3><p>每一种类型的Hook可以使应用程序能够监视不同类型的系统消息处理机制。下面描述所有可以利用的Hook类型。</p><ol><li><code>WH_CALLWNDPROC</code>(4)和<code>WH_CALLWNDPROCRET Hooks</code>(12)<br>WH_CALLWNDPROC和WH_CALLWNDPROCRET Hooks使你可以监视发送到窗口过程的消息。系统在消息发送到接收窗口过程之前调用WH_CALLWNDPROC Hook子程，并且在窗口过程处理完消息之后调用WH_CALLWNDPROCRET Hook子程。<br>WH_CALLWNDPROCRET Hook传递指针到CWPRETSTRUCT结构，再传递到Hook子程。<br>CWPRETSTRUCT结构包含了来自处理消息的窗口过程的返回值，同样也包括了与这个消息关联的消息参数。</li><li><code>WH_CBT</code>(5) Hook<br>在以下事件之前，系统都会调用WH_CBT Hook子程，这些事件包括：</li></ol><ul><li>激活，建立，销毁，最小化，最大化，移动，改变尺寸等窗口事件；</li><li>完成系统指令；</li><li>来自系统消息队列中的移动鼠标，键盘事件；</li><li>设置输入焦点事件；</li><li>同步系统消息队列事件。<br>Hook子程的返回值确定系统是否允许或者防止这些操作中的一个。</li></ul><ol start="3"><li><code>WH_DEBUG</code>(9) Hook<br>在系统调用系统中与其他Hook关联的Hook子程之前，系统会调用WH_DEBUG Hook子程。你可以使用这个Hook来决定是否允许系统调用与其他Hook关联的Hook子程。</li><li><code>WH_FOREGROUNDIDLE</code>(11) Hook<br>当应用程序的前台线程处于空闲状态时，可以使用WH_FOREGROUNDIDLE Hook执行低优先级的任务。当应用程序的前台线程大概要变成空闲状态时，系统就会调用WH_FOREGROUNDIDLE Hook子程。</li><li><code>WH_GETMESSAGE</code>(3) Hook<br>应用程序使用WH_GETMESSAGE Hook来监视从GetMessage or PeekMessage函数返回的消息。你可以使用WH_GETMESSAGE Hook去监视鼠标和键盘输入，以及其他发送到消息队列中的消息。</li><li><code>WH_JOURNALPLAYBACK</code>(1) Hook<br>WH_JOURNALPLAYBACK Hook使应用程序可以插入消息到系统消息队列。可以使用这个Hook回放通过使用WH_JOURNALRECORD Hook记录下来的连续的鼠标和键盘事件。只要WH_JOURNALPLAYBACK Hook已经安装，正常的鼠标和键盘事件就是无效的。<br>WH_JOURNALPLAYBACK Hook是全局Hook，它不能象线程特定Hook一样使用。<br>WH_JOURNALPLAYBACK Hook返回超时值，这个值告诉系统在处理来自回放Hook当前消息之前需要等待多长时间（毫秒）。这就使Hook可以控制实时事件的回放。<br>WH_JOURNALPLAYBACK是system-wide local hooks，它們不會被注射到任何行程位址空間。</li><li><code>WH_JOURNALRECORD</code>(0) Hook<br>WH_JOURNALRECORD Hook用来监视和记录输入事件。典型的，可以使用这个Hook记录连续的鼠标和键盘事件，然后通过使用WH_JOURNALPLAYBACK Hook来回放。<br>WH_JOURNALRECORD Hook是全局Hook，它不能象线程特定Hook一样使用。<br>WH_JOURNALRECORD是system-wide local hooks，它們不會被注射到任何行程位址空間。</li><li><code>WH_KEYBOARD</code>(2) Hook<br>在应用程序中，WH_KEYBOARD Hook用来监视WM_KEYDOWN and WM_KEYUP消息，这些消息通过GetMessage or PeekMessage function返回。可以使用这个Hook来监视输入到消息队列中的键盘消息。</li><li><code>WH_KEYBOARD_LL</code>(13) Hook<br>WH_KEYBOARD_LL Hook监视输入到线程消息队列中的键盘消息。</li><li><code>WH_MOUSE</code>(7) Hook<br>WH_MOUSE Hook监视从GetMessage 或者 PeekMessage 函数返回的鼠标消息。使用这个Hook监视输入到消息队列中的鼠标消息。</li><li><code>WH_MOUSE_LL</code>(14) Hook<br>WH_MOUSE_LL Hook监视输入到线程消息队列中的鼠标消息。</li><li><code>WH_MSGFILTER</code>(-1) 和 <code>WH_SYSMSGFILTER</code>(6) Hooks<br>WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以监视菜单，滚动条，消息框，对话框消息并且发现用户使用ALT+TAB or ALT+ESC 组合键切换窗口。WH_MSGFILTER Hook只能监视传递到菜单，滚动条，消息框的消息，以及传递到通过安装了Hook子程的应用程序建立的对话框的消息。WH_SYSMSGFILTER Hook监视所有应用程序消息。<br>WH_MSGFILTER 和 WH_SYSMSGFILTER Hooks使我们可以在模式循环期间过滤消息，这等价于在主消息循环中过滤消息。<br>通过调用CallMsgFilter function可以直接的调用WH_MSGFILTER Hook。通过使用这个函数，应用程序能够在模式循环期间使用相同的代码去过滤消息，如同在主消息循环里一样。</li><li><code>WH_SHELL</code> Hook(10)<br>外壳应用程序可以使用WH_SHELL Hook去接收重要的通知。当外壳应用程序是激活的并且当顶层窗口建立或者销毁时，系统调用WH_SHELL Hook子程。<br>WH_SHELL 共有５钟情況：</li></ol><ul><li>只要有个top-level、unowned 窗口被产生、起作用、或是被摧毁；</li><li>当Taskbar需要重画某个按钮；</li><li>当系统需要显示关于Taskbar的一个程序的最小化形式；</li><li>当目前的键盘布局状态改变；</li><li>当使用者按Ctrl+Esc去执行Task Manager（或相同级别的程序）。<br>按照惯例，外壳应用程序都不接收WH_SHELL消息。所以，在应用程序能够接收WH_SHELL消息之前，应用程序必须调用SystemParametersInfo function注册它自己。</li></ul><h3 id="本章总结"><a href="#本章总结" class="headerlink" title="本章总结"></a>本章总结</h3><p>呵呵,有点昏昏的感觉吗?不要紧的,多看几次就会好的!<br>好了,这期的勾子基本概念就算讲完了,让我们来总结一下:</p><ol><li>钩子的基本概念及作用<br>钩子实际上是一个处理消息的程序段，通过系统调用，把它挂入系统。每当特定的消息发出，在没到达目的窗口前，钩子程序就先捕获该消息，亦即钩子函数先得到控制权。这时钩子函数即可以加工处理（改变）该消息，也可以不作处理而继续传递该消息，还可以强制结束消息的传递。</li><li>使用API函数SetWindowsHookEx()安装钩子.<br>在易中则这样声明DLL:<pre class="line-numbers language-none"><code class="language-none">.DLL命令 SetWindowsHookExA, 整数型, , "SetWindowsHookExA"  .参数 idHook, 整数型  .参数 lpfn, 子程序指针  .参数 nMod, 整数型  .参数 dwThreadID, 整数型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>用API函数CallNextHookEx来传递钩子<pre class="line-numbers language-none"><code class="language-none">.DLL命令 CallNextHookEx, 整数型, , "CallNextHookEx"  .参数 hhook, 整数型  .参数 nCode, 整数型  .参数 wParam, 整数型  .参数 lParam, 整数型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>用API函数UnHookWindowsHookEx()来卸载钩子<pre class="line-numbers language-none"><code class="language-none">.DLL命令 api_UnhookWindowsHookEx, 逻辑型, , "UnhookWindowsHookEx".参数 hhook, 整数型<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre>我们拿最常用的上面的第5个WH_GETMESSAGE(3) Hook 来说明一下:<br>看看下面这段易代码你就会明白的:<pre class="line-numbers language-none"><code class="language-none">hMod ＝ LoadLibraryA (取运行目录 () ＋ “\HookDLL.dll” )  '装载动态链接库lpProc ＝GetProcAddress (hMod, “GetMsgProc”)   '定位钩子回调函数函数hhook ＝ SetWindowsHookExA (#WH_GETMESSAGE, lpProc, hMod, 0)   '安装钩子<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre>好了,这期的理论知识就到这了,请关注下期的精彩内容.</li></ol><h3 id="下期预告"><a href="#下期预告" class="headerlink" title="下期预告"></a>下期预告</h3><p>下期我们将用易源码实例来讲解,怎样用钩子技术和内存文件映射共享技术来<br>实现远程线程插入资源管理器进程(explorer.exe),</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h3 id=&quot;本期导读&quot;&gt;&lt;a href=&quot;#本期导读&quot; class=&quot;headerlink&quot; title=&quot;本期导读&quot;&gt;&lt;/a&gt;本期导读&lt;/h3&gt;&lt;p&gt;   什么叫勾子,勾子又起什么作用,它有那些类别,怎么使用,等等这些问题将在本期找到答案&lt;/p&gt;
&lt;h3 id=&quot;基本概念&quot;</summary>
      
    
    
    
    <category term="分享" scheme="http://www.nohacks.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="易语言核心编程" scheme="http://www.nohacks.cn/tags/%E6%98%93%E8%AF%AD%E8%A8%80%E6%A0%B8%E5%BF%83%E7%BC%96%E7%A8%8B/"/>
    
    <category term="钩子基本概念" scheme="http://www.nohacks.cn/tags/%E9%92%A9%E5%AD%90%E5%9F%BA%E6%9C%AC%E6%A6%82%E5%BF%B5/"/>
    
  </entry>
  
  <entry>
    <title>汇编Ring 3下实现 HOOK API</title>
    <link href="http://www.nohacks.cn/2007/07/18/hui-bian-ring-3-xia-shi-xian-hook-api.html"/>
    <id>http://www.nohacks.cn/2007/07/18/hui-bian-ring-3-xia-shi-xian-hook-api.html</id>
    <published>2007-07-18T00:45:15.000Z</published>
    <updated>2022-01-17T03:27:36.418Z</updated>
    
    <content type="html"><![CDATA[<h4 id="1-简介"><a href="#1-简介" class="headerlink" title="1.简介"></a>1.简介</h4><blockquote><p>很早以前发表在看雪论坛的一篇关于hook api的文章，重新翻出来，以补充博客内容~ 由nohacks.cn原创，转载请注明出处。</p></blockquote><h4 id="2-介绍"><a href="#2-介绍" class="headerlink" title="2. 介绍"></a>2. 介绍</h4><p>  这篇文章是有关在OS Windows下挂钩API函数的方法。所有例子都在基于NT技术的Windows版本NT4.0及以上有效(Windows NT 4.0, Windows 2000, Windows XP，可能在其它Windows系统也会有效。你应该比较熟悉Windows下的进程、汇编器、和一些API函数，才能明白这篇文章里的内容。</p><h5 id="2-1-什么叫Hook-API"><a href="#2-1-什么叫Hook-API" class="headerlink" title="2.1 什么叫Hook API?"></a>2.1 什么叫Hook API?</h5><p>   所谓Hook就是钩子的意思，而API是指Windows开放给程序员的<code>编程接口</code>，使得在用户级别下可以对操作系统进行控制，也就是一般的应用程序都需要调用API来完成某些功能，Hook API的意思就是在这些应用程序调用真正的系统API前可以先被截获，从而进行一些处理再调用真正的API来完成功能。</p><h5 id="2-2-API-Hook的应用介绍"><a href="#2-2-API-Hook的应用介绍" class="headerlink" title="2.2 API Hook的应用介绍"></a>2.2 API Hook的应用介绍</h5><p>   <code>API Hook</code>技术应用广泛,常用于<code>屏幕取词</code>,<code>网络防火墙</code>,<code>病毒木马</code>,<code>加壳软件</code>,<code>串口红外通讯</code>,<code>游戏外挂</code>,<code>internet通信</code>等领域API HOOK的中文意思就是钩住API,对API进行预处理,先执行我们的函数,例如我们用API Hook技术挂接ExitWindowsEx API函数使关机失效,挂接ZwOpenProcess函数隐藏进程等等……</p><h5 id="2-3-API-Hook的原则"><a href="#2-3-API-Hook的原则" class="headerlink" title="2.3 API Hook的原则"></a>2.3 API Hook的原则</h5><p>   HOOK API有一个原则，这个原则就是：被HOOK的API的原有功能不能受到任何影响。就象医生救人,如果把病人身体里的病毒杀死了，病人也死了，那么这个“救人”就没有任何意义了。如果你HOOK API之后，你的目的达到了，但API的原有功能失效了，这样不是HOOK，而是REPLACE，操作系统的正常功能就会受到影响，甚至会崩溃。</p><h4 id="3-挂钩方法"><a href="#3-挂钩方法" class="headerlink" title="3. 挂钩方法"></a>3. 挂钩方法</h4><p>   总的来说,常用的挂钩API方法有以下两种:</p><h5 id="3-1-改写IAT导入表法"><a href="#3-1-改写IAT导入表法" class="headerlink" title="3.1 改写IAT导入表法"></a>3.1 改写IAT导入表法</h5><p>   修改可执行文件的IAT表（即输入表）因为在该表中记录了所有调用API的函数地址，则只需将这些地址改为自己函数的地址即可，但是这样有一个局限，因为有的程序会加壳，这样会隐藏真实的IAT表，从而使该方法失效。</p><h5 id="3-2-改写内存地址JMP法"><a href="#3-2-改写内存地址JMP法" class="headerlink" title="3.2 改写内存地址JMP法"></a>3.2 改写内存地址JMP法</h5><p>   直接跳转，改变API函数的入口或出口的几个字节，使程序跳转到自己的函数,该方法不受程序加壳的限制。这种技术,说起来也不复杂，就是改变程序流程的技术。在CPU的指令里，有几条指令可以改变程序的流程：JMP，CALL，INT，RET，RETF，IRET等指令。理论上只要改变API入口和出口的任何机器码，都可以HOOK,下面我就说说常用的改写API入口点的方法:</p><p>   因为工作在Ring3模式下,我们不能直接修改物理内存,只能一个一个打开修改,但具体的方法又分成好几种,我给大家介绍几种操作思路:</p><p>  &lt;1&gt;首先改写API首字节,要实现原API的功能需要调用API时先还原被修改的字节,然后再调用原API,调用完后再改回来,这样实现有点麻烦,但最简单,从理论上说有漏HOOK的可能,因为我们先还原了API,如果在这之前程序调用了API,就有可能逃过HOOK的可能!</p><p>  (2)把被覆盖的汇编代码保存起来,在替代函数里模拟被被覆盖的功能,然后调用原函数(原地址+被覆盖长度).但这样会产生一个问题,不同的汇编指令长度是不一样的(比如说我们写入的JMP指令占用5个字节,而我们写入的这5个字节占用的位置不一定正好是一个或多个完整的指令,有可能需要保存7个字节,才不能打乱程序原有的功能,需要编写一个庞大的判断体系来判断指令长度,网上已经有这样的汇编程序(Z0MBiE写的LDE32),非常的复杂!</p><p>  (3)把被HOOK的函数备份一下,调用时在替代函数里调用备份函数.为了避免麻烦,可以直接备份整个DLL缺点就是太牺牲内存,一般不推荐使用这种方法!</p><h4 id="4-汇编实现"><a href="#4-汇编实现" class="headerlink" title="4. 汇编实现"></a>4. 汇编实现</h4><p>本文就是建立在第2种方法<code>改写内存地址JMP法</code>之上的!本着先易后难的原则,今天我们先来说说它的第1种操作思路.</p><p>  我们拿API函数ExitWindowsEx来说明,下面是我在OD里拦下的ExitWindowsEx原入口部分</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">77D59E2D            $  8BFF          mov edi,edi  77D59E2F            .  55            push ebp77D59E30            .  8BEC          mov ebp,esp77D59E32            .  83EC 18       sub esp,18<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>  如果我们把ExitWindowsEx的入口点改为下面的,会出现什么情况?</p><pre class="line-numbers language-none"><code class="language-none">77D59E2D               B8 00400000   mov eax,400077D59E32               FFE0          jmp eax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>  我们可想而知,程序执行到77D59E32处就会改变流程跳到00400000的地方</p><p>  如果我们的00400000处是这样的子程:</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">=======================MyAPI proc  bs:DWORD  ,dwReserved:DWORD  ;和ExitWindowsEx一样带2个参数                 ;做你想做的事......;这里放API入口点改回原机器码的代码;如果你是备份的整个DLL,就直接调用备份API,不用改来改去了,不会有漏勾API的可能!invoke ExitWindowsEx,bs,dwReserved                           ;这里放HOOK API的代码  .endifmov eax,TRUEret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   这里的MyAPI是和ExitWindowsEx参数一样的的子程,因为程序是在API的入口部分跳转的,根据stdcall约定(参数数据从右向左依次压栈，恢复堆栈的工作交由被调用者),此时堆栈还没有恢复,我们</p><p>在子程里取出的参数数据依然有效,我们可以在这里执行自己的代码,你可以决定是否继续按原参数或改变参数后再调用原API,也可以什么都不做,当然在调用之前,我们要先还原我们修改过的API(可以事先用</p><p>API函数ReadProcessMemory读出原API的前几个字节备份之),调用完后再改回来继续HOOKAPI,不过这种方法有漏API的可能原因前面已经说了),你如果觉得这个方法不妥,因为一般系统DLL都不大,你可以</p><p>备份整个DLL.</p><p>下面我就列出ring3下HOOK API的几个步骤：</p><p>1.得到要挂勾API的入口点</p><p>2.修改API的入口点所在页的页面保护为可读写模式</p><p>3.用ReadProcessMemory读出API的入口点开始的几字节备份</p><p>4.用WriteProcessMemory修改API的入口点象这样的形式:<br>  </p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">mov eax,4000jmp eax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><br> 其中的4000要用和原API参数一样的子程序地址代替<p></p><p>  在这个子程序里我们决定用什么参数再调用原API,不过调用之前要用备份的前8字节改回来</p><p>调用之后在挂勾,如此反复.</p><h5 id="4-1-代码"><a href="#4-1-代码" class="headerlink" title="4.1. 代码"></a>4.1. 代码</h5><p>  前面所讲的是本进程挂勾,我们要挂勾所有进程,可以用全局勾子,需要单独的一个DLL,我们可以在DLL的DLL_PROCESS_ATTACH事件里来HOOK API</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">=================================hookdll.dll==========================.486 .model flat,stdcall   ;参数的传递约定是stdcall(从右到左，恢复堆栈的工作交由被调用者)option casemap:none include \masm32\include\windows.inc include \masm32\include\kernel32.inc includelib \masm32\lib\kernel32.lib include \masm32\include\user32.inc includelib \masm32\lib\user32.lib HOOKAPI struct a  byte ? PMyapi DWORD ?   d BYTE ?  e BYTE ?HOOKAPI ends;子程序声明WriteApi proto :DWORD ,:DWORD,:DWORD,:DWORDMyAPI proto  :DWORD  ,:DWORDGetApi proto  :DWORD,:DWORD;已初始化数据.data hInstance dd 0WProcess dd 0hacker HOOKAPI &lt;&gt; CommandLine LPSTR ? Papi1 DWORD ? Myapi1 DWORD ?ApiBak1 db 10 dup(?) DllName1  db "user32.dll",0      ApiName1  db "ExitWindowsEx",0 mdb db "下面的程序想关闭计算机,要保持阻止吗?",0;未初始化数据.data? hHook dd ? hWnd dd ? ;程序代码段.code DllEntry proc hInst:HINSTANCE, reason:DWORD, reserved1:DWORD       .if reason==DLL_PROCESS_ATTACH     ;当DLL加载时产生此事件        push hInst         pop hInstance invoke GetCommandLine   mov CommandLine,eax                                         ;取程序命令行;初始化mov hacker.a,0B8h     ;mov eax,;mov hacker.d PMyapi  ;0x000000mov hacker.d,0FFh     ;jmp mov hacker.e, 0E0h    ;eax invoke   GetCurrentProcess                                   ;取进程伪句柄 mov WProcess ,eax    invoke GetApi,addr DllName1,addr ApiName1                    ;取API地址   mov Papi1,eax                                               ;保存API地址invoke ReadProcessMemory,WProcess,Papi1,addr ApiBak1,8,NULL  ;备份原API的前8字节 mov hacker.PMyapi,offset MyAPI   ;0x0000,这里设置替代API的函数地址invoke WriteApi,WProcess,Papi1, addr hacker ,size HOOKAPI    ;HOOK API.endif .if  reason==DLL_PROCESS_DETACH invoke WriteApi,WProcess,Papi1, addr ApiBak1 ,8               ;还原API.endif  mov  eax,TRUE     ret DllEntry Endp GetMsgProc proc nCode:DWORD,wParam:DWORD,lParam:DWORD     invoke CallNextHookEx,hHook,nCode,wParam,lParam      mov eax,TRUE           ret GetMsgProc endp InstallHook proc       invoke SetWindowsHookEx,WH_GETMESSAGE,addr GetMsgProc,hInstance,NULL     mov hHook,eax     ret InstallHook endp UninstallHook proc     invoke UnhookWindowsHookEx,hHook    invoke WriteApi,WProcess,Papi1, addr ApiBak1 ,8  ret UninstallHook endp GetApi proc DllNameAddress:DWORD,ApiNameAddress:DWORDinvoke  GetModuleHandle,DllNameAddress     ;取DLL模块句柄     .if eax==NULL    invoke LoadLibrary ,DllNameAddress    ;加载DLL     .endif   invoke GetProcAddress,eax,ApiNameAddress  ;取API地址   mov eax,eax  retGetApi endp;============================下面是核心部分=========================WriteApi proc Process:DWORD ,Papi:DWORD,Ptype:DWORD,Psize:DWORDLOCAL mbi:MEMORY_BASIC_INFORMATIONLOCAL msize:DWORD;返回页面虚拟信息invoke VirtualQueryEx,Process, Papi,addr mbi,SIZEOF MEMORY_BASIC_INFORMATION;修改为可读写模式invoke VirtualProtectEx,Process, mbi.BaseAddress,8h,PAGE_EXECUTE_READWRITE,addr mbi.Protect;开始写内存invoke  WriteProcessMemory,Process, Papi, Ptype,Psize ,NULLPUSH eax;改回只读模式invoke VirtualProtectEx,Process,mbi.BaseAddress,8h,PAGE_EXECUTE_READ,addr mbi.Protectpop eaxretWriteApi endp;替代的API,参数要和原来一样MyAPI proc  bs:DWORD  ,dwReserved:DWORD                      invoke MessageBox, NULL,  CommandLine, addr mdb, MB_YESNO      ;弹出信息框选择是否阻止.if eax==7                                                   ;如果选择否 invoke WriteApi,WProcess,Papi1, addr ApiBak1 ,8              ;先还原API  invoke ExitWindowsEx,bs,dwReserved                           ;再调用API  invoke WriteApi,WProcess,Papi1, addr hacker ,sizeof HOOKAPI  ;调用完后再改回来  .endifmov eax,TRUE retMyAPI endpEnd DllEntry===============================hookdll.def=============================LIBRARY hookdllEXPORTS InstallHookEXPORTS UninstallHook<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="4-2-分析"><a href="#4-2-分析" class="headerlink" title="4.2. 分析"></a>4.2. 分析</h5><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">HOOKAPI struct a  byte ? PMyapi DWORD ?   d BYTE ?  e BYTE ?HOOKAPI ends<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   为了便于理解和使用,我定义了一个结构:这个结构有4个成员,第一个成员a,是个字节型,我用来放0B8h(mov eax),PMyapi一个整数型,用来放我们的替代API函数的地址(0X000),第3个和第4个成员我分别用来放JMP和EAX(jmp eax)那么连起来就是 mov,0X0000 ; jmp eax  </p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm"> .if reason==DLL_PROCESS_ATTACH             push hInst         pop hInstance invoke GetCommandLine   mov CommandLine,eax                                         ;初始化mov hacker.a,0B8h     ;mov eax,;mov hacker.d PMyapi  ;0x0000mov hacker.d,0FFh     ;jmp mov hacker.e, 0E0h    ;eaxinvoke   GetCurrentProcess                                    mov WProcess ,eax<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  当DLL加载时,我们先保存模块句柄,读取程序命令行,然后初始化HOOKAPI结构,写入我们要写到内存的指令(PMyapi以后写入)并调用GetCurrentProcess取出进程伪句柄方便以后写内存.</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">invoke GetApi,addr DllName1,addr ApiName1                       mov Papi1,eax                                               invoke ReadProcessMemory,WProcess,Papi1,addr ApiBak1,8,NULL   mov hacker.PMyapi,offset MyAPI   ;0x0000   invoke WriteApi,WProcess,Papi1, addr hacker ,size HOOKAPI    ;HOOK API<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>  接下来用子程GetApi取出要挂勾API的入口点,并用ReadProcessMemory读出入口点8字节备份之,写入PMyapi调用子程WriteApi改写API的入口点,这个子程我不准备详细说了,它非常的简单,无非就是几个API的调用.它的核心就是通过WriteProcessMemory改写内存.</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">.if  reason==DLL_PROCESS_DETACH invoke WriteApi,WProcess,Papi1, addr ApiBak1 ,8               .endif  mov  eax,TRUE     ret <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   如果这个DLL被卸载了,那么那个在DLL里的替代函数(MyAPI)将是无效的,如果这个时候程序再调用这个API,将出现非法操作,因此在DLL卸载前,我们必须还原API.</p><p>   总结一下,现在只要程序加载这个DLL,这个程序的ExitWindowsEx就会被我们勾住,接下来要怎样才能让所有的程序都加载这个DLL呢?这就需要安装全局勾子:</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">InstallHook proc     invoke SetWindowsHookEx,WH_GETMESSAGE,addr GetMsgProc,hInstance,NULL       invoke WriteApi,WProcess,Papi1, addr hacker ,sizeof HOOKAPI    mov hHook,eax    ret InstallHook endp <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   通过SetWindowsHookEx安装勾子,最后一个参数可以决定该钩子是局部的还是系统范围的。如果该值为NULL，那么该钩子将被解释成系统范围内的，那它就可以监控所有的进程及它们的线程。</p><p>如果该函数调用成功的话，将在eax中返回钩子的句柄，否则返回NULL。我们必须保存该句柄，因为后面我们还要它来卸载钩子,可以看出，我们创建的Hook类型是WH_CALLWNDPROC类型,该类型的Hook在进</p><p>程与系统一通信时就会被加载到进程空间，从而调用dll的初始化函数完成真正的Hook,值得一提的是:因为要调用SetWindowsHookEx来安装钩子,我们GUI程序的这个DLL不会被UnhookWidowHookEx卸载</p><p>,也就只有一次DLL_PROCESS_ATTACH事件,因此这里再要HOOK API一次!</p><p>我们回头来看看钩子回调函数:</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">GetMsgProc proc nCode:DWORD,wParam:DWORD,lParam:DWORD     invoke CallNextHookEx,hHook,nCode,wParam,lParam      mov eax,TRUE        ret GetMsgProc endp <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>   可以看到这里只是调用CallNextHookEx将消息交给Hook链中下一个环节处理，因为这里API函数SetWindowsHookEx的唯一作用就是让进程加载我们的dll。</p><pre class="line-numbers language-asm" data-language="asm"><code class="language-asm">UninstallHook proc    invoke UnhookWindowsHookEx,hHook    invoke WriteApi,WProcess,Papi1, addr ApiBak1 ,8 ret UninstallHook endp <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>要卸载一个钩子时调用UnhookWidowHookEx函数，该函数仅有一个参数，就是欲卸载的钩子的句柄。钩子卸载后我们也要还原我们GUI程序的API.</p><pre class="line-numbers language-none"><code class="language-none">LIBRARY hookdllEXPORTS InstallHookEXPORTS UninstallHook<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>   我们公开DLL里的InstallHook和UninstallHook函数,方便程序调用,这样我们只要在另外的程序中调用InstallHook便可安装全局勾子,勾住所有程序中的API:ExitWindowsEx,执行我们自定的子程!如果不需要了,可以调用UninstallHook卸载全局勾子.</p><p>   请注意：对于远程钩子，钩子函数必须放到DLL中，它们将从DLL中映射到其它的进程空间中去。当WINDOWS映射DLL到其它的进程空间中去时，不会把数据段也进行映射。简言之，所有的进程仅共享DLL的代码，至于数据段，每一个进程都将有其单独的拷贝。这是一个很容易被忽视的问题。您可能想当然的以为，在DLL中保存的值可以在所有映射该DLL的进程之间共享。在通常情况下，由于每一个映射该DLL的进程都有自己的数据段，所以在大多数的情况下您的程序运行得都不错。但是钩子函数却不是如此。对于钩子函数来说，要求DLL的数对所有的进程也必须相同。这样您就必须把数据段设成共享的:</p><p> 一般来说, 目标文件有三个段, 分别是 text/data/bss 段.</p><p>.text 段放置代码, 是只读且可运行段 </p><p>.data 段放置静态数据, 这些数据会被放置入 exe 文件. 这个段是可读写, 但是不能运行的. </p><p>.bss 段放置动态数据, 这些数据不被放入 exe 文件, 在exe文件被加载入内存后才分配的空间.</p><p>你可以通过在链接开关中指定段的属性来实现:</p><p>/SECTION:name,[E][R][W][S][D][K][L][P][X]</p><p>其中S表示共享,已初期化的段名是.data，未初始化的段名是.bss。假如您想要写一个包含钩子函数的DLL，而且想使它的未初始化的数据段在所有进程间共享，您必须这么做：</p><p>link /section:.bss[S]  /DLL  /SUBSYSTEM:WINDOWS ……….</p><p>否则,您的全局勾子将不能正常工作!</p><h4 id="５-结束语"><a href="#５-结束语" class="headerlink" title="５. 结束语"></a>５. 结束语</h4><p>   我欢迎任何人提出更多的这里没有提到的挂钩方法，我肯定那会有很多。同样欢迎补充我介绍得不是很详细的方法。也可以把我懒得写的其它方法完成，把源代码发给我。这篇文档的目的是演示挂钩技术的细节，我希望我做到了。</p><h4 id="相关链接"><a href="#相关链接" class="headerlink" title="相关链接"></a>相关链接</h4><p>   看雪原贴：<a href="https://bbs.pediy.com/thread-28895.htm">https://bbs.pediy.com/thread-28895.htm</a>  </p>]]></content>
    
    
      
      
    <summary type="html">&lt;h4 id=&quot;1-简介&quot;&gt;&lt;a href=&quot;#1-简介&quot; class=&quot;headerlink&quot; title=&quot;1.简介&quot;&gt;&lt;/a&gt;1.简介&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;很早以前发表在看雪论坛的一篇关于hook api的文章，重新翻出来，以补充博客内容~ 由nohac</summary>
      
    
    
    
    <category term="分享" scheme="http://www.nohacks.cn/categories/%E5%88%86%E4%BA%AB/"/>
    
    
    <category term="hook api" scheme="http://www.nohacks.cn/tags/hook-api/"/>
    
    <category term="asm" scheme="http://www.nohacks.cn/tags/asm/"/>
    
  </entry>
  
</feed>
